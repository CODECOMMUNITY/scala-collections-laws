// **********************************************
// This file defines wildcard replacements for tests, on a class-by-class basis.

// Each collection is a block separated by TWO newlines.
// Whitespace is important!

// The block starts with a contained type name (e.g. Int) followed by the
// name of the collection parameterized by that type (e.g. Array[Int]).
// No imports are assumed, so qualify names adequately.

// The block continues with a list of mappings of one of three forms.
//   Generic substitutions are of the form CAPS --> code_to_substitite
//     These will replace instances of @CAPS in the code written in single-line.tests.
//   Parameterized substitutions are of the form $CAP --> before_parameter $ after_parmeter
//     Whitespace is important!  " $ " must appear.
//     Parameterized substitutions can be applied to generic substitutions
//   Informational mappings are of the form lowercase --> custom stuff
//     flags --> F declares a collection type to have flag F (flags are never assumed, you must declare any that exist)
//     instance --> new X declares how to create a new instance of this type
//       (required to create the Instances.scala file; methods will be taken from here)

// A generic set of substitutions can be created by naming the collection *
// Specific collections that hold the same type will inherit all those mappings
// Mappings in the specific collections will replace those of the generic collection

// Any generic substitution can be a _set_ from which one element will be picked.
// Simply list the options separated by whitespace.
// The parser is delimiter-aware, so you can use matched () or {} or <> or [] to
// keep functionality together.

// As set up presently, every collection must define a parameterized substitution $NEW that generates a
// new collection of the desired type given a collection of some other type.

// There are five special generic substitutions:
//   A --> this is automatically set to the data type held by the collection (cannot be overridden)
//   CC --> this is automatically set to the collection type (with type parameter; cannot be overridden)
//   CCN --> this is automatically set to the collection type without type parameter (cannot be overridden)
//   CCM --> this is used to determine which methods are available; it is the same as CC unless overridden
//   NAME --> this is used to determine filenames and uniqueness, set to CC by default

// There is one special flag
//    BROKEN -- don't use this collection

// There are four informational mappings that aren't actually substituted
//    doNotVerifyMethods --> any methods here are assumed to exist; they aren't checked either for presence or usage
//    junitMethodPrefix --> $LINE(anything here e.g. an annotation goes right before each method when creating jUnit tests)
//    fileHeader --> $LINE(this goes at the top of the test file) $LINE(and this goes on the next line)
//    junitFileHeader --> $LINE(this goes after the normal file headers) $LINE(but these only appear for jUnit tests)

// **********************************************



// The generic data supplied for collections that contain Ints
Int *
X --> $NEW((0 to 3)) $NEW((0 until 0)) $NEW((0 to 20 by 3)) $NEW((0 to 64)) $NEW(List[Int](0,1,2,0,1,2))
F --> ((_i: Int) => _i + 1)
GS --> List((_i: Int) => (_i%2), (_i: Int) => math.signum(_i), (_i: Int) => (_i/2))
PROP --> ((_i: @A) => _i < p_i)
PF --> { case _i if _i < pf_i => _i + 1 }
YS --> (List[Range](4 to 8, 0 until 0, 0 to 3, 1 to 20 by 3, -64 to 0, 2 to 3, 0 to 1).map(y => () => $NEW(y)))
CA --> List[Int](-70, -64, -14, -1, 0, 1, 2, 3, 4, 5, 6, 11, 12, 13, 14, 22, 40, 63, 64, 70)
CB --> List[Int](-70, -64, -15, -14, -13, -1, 0, 1, 2, 3, 12, 22, 40, 63, 64, 70)
CM --> List[Int](-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 39, 40, 41, 64, 65, 66)
CN --> List[Int](-2, -1, 0, 1, 2, 3, 4, 5, 6, 11, 12, 13, 14, 22, 40, 63, 64, 70)
CR --> List[Int](0, 1, 2, 5, 15, 28, 33, 104)
OP --> + *
LET --> def
ONE --> 1
ZERO --> 0
DEFINITE --> true
MINEVALS --> 0
AGAIN --> true
a --> $PRE(val ca = @CA) $FOR(a <- ca)
b --> $PRE(val cb = @CB) $FOR(b <- cb)
f --> $PRE(val f = @F)
g --> $PRE(val gs = @GS) $FOR(g <- gs)
m --> $PRE(val cm = @CM) $FOR(m <- cm)
n --> $PRE(val cn = @CN) $FOR(n <- cn)
one --> $PRE(val one = @ONE)
op --> $PRE(val op = (a1: @A, a2: @A) => a1 @OP a2)
p --> $PRE(val ca = @CA) $FOR(p_i <- ca; p = @PROP)
pf --> $PRE(val ca = @CA) $FOR(pf_i <- ca) $IN(val pf: PartialFunction[Int,Int] = @PF)
r --> $PRE(val cr = @CR) $FOR(r <- cr)
x --> $PRE(@LET x = @X)
y --> $PRE(val ys = @YS) $FOR(y_i <- ys) $IN(@LET y = y_i())
z --> $PRE(val ca = @CA) $FOR(z <- ca)
zero --> $PRE(val zero = @ZERO)
instance --> $NEW((0 to 0))
doNotVerifyMethods --> foreach map flatMap filter seq par equals hashCode toString canEqual stringPrefix
fileHeader --> $LINE(package tests.generated.collection)
           --> $LINE(import scala.util.Try)
           --> $LINE(import laws.Laws.Implicits._)
           --> $LINE(import laws.Laws.sameType)
junitFileHeader --> $LINE(import org.junit.runner.RunWith)
                --> $LINE(import org.junit.runners.JUnit4)
                --> $LINE(import org.junit.Test)





// Immutable types


Int collection.immutable.BitSet
flags --> N S BROKEN
LET --> val
$NEW --> collection.immutable.BitSet( $ : _*)
// Bitsets should be tested but are a bit annoying so ignore them for now.


Int collection.immutable.HashSet[Int]
flags --> S
LET --> val
$NEW --> (collection.immutable.HashSet.empty[Int] ++ $ )


Int collection.immutable.IndexedSeq[Int]
LET --> val
$NEW --> collection.immutable.IndexedSeq[Int]( $ : _*)


Int collection.immutable.Iterable[Int]
LET --> val
$NEW --> collection.immutable.Iterable[Int]( $ : _*)


Int collection.immutable.LinearSeq[Int]
LET --> val
$NEW --> collection.immutable.LinearSeq[Int]( $ : _*)


Int collection.immutable.List[Int]
LET --> val
$NEW --> collection.immutable.List[Int]( $ : _*)


Int collection.immutable.ListSet[Int]
flags --> S
LET --> val
$NEW --> (collection.immutable.ListSet.empty[Int] ++ $ )


Int collection.immutable.PagedSeq[Int]
flags --> PS BROKEN
LET --> val
$NEW --> ({ val temp = $ ; new collection.immutable.PagedSeq[Int]((a,i,j) => { val t2 = temp.slice(i,j); var k=i; t2.foreach{ x => a(k) = x; k+=1 }; if (k==i) -1 else k-i }) })
// PagedSeq is just too broken to deal with now.


Int collection.immutable.Queue[Int]
LET --> val
$NEW --> collection.immutable.Queue[Int]( $ : _*)


Int collection.immutable.Range
X  --> $NEW((0 to 3)) $NEW((0 until 0)) $NEW((0 to 20 by 3)) $NEW((0 to 64))
flags --> N RANGE BUGB
LET --> val
$NEW --> ( $ : collection.immutable.Range )


Int collection.immutable.Seq[Int]
LET --> val
$NEW --> collection.immutable.Seq[Int]( $ : _*)


Int collection.immutable.Set[Int]
flags --> S
LET --> val
$NEW --> (collection.immutable.Set.empty[Int] ++ $ )


Int collection.immutable.SortedSet[Int]
flags --> S SORTED
LET --> val
$NEW --> (collection.immutable.SortedSet.empty[Int] ++ $ )


Int collection.immutable.Stack[Int]
LET --> val
$NEW --> collection.immutable.Stack[Int]( $ : _*)


Int collection.immutable.Stream[Int]
flags --> LAZY ADEFINITE BUGE
LET --> val
$NEW --> ( $ ).toStream
DEFINITE --> false
MINEVALS --> 1


Int collection.immutable.Traversable[Int]
LET --> val
$NEW --> collection.immutable.Traversable[Int]( $ : _*)


Int collection.immutable.TreeSet[Int]
flags --> S SORTED BUGA
LET --> val
$NEW --> collection.immutable.TreeSet[Int]( $ : _* )


Int collection.immutable.Vector[Int]
LET --> val
$NEW --> collection.immutable.Vector[Int]( $ : _*)




// Mutable types


Int Array[Int]
CCM --> collection.mutable.WrappedArray[Int]
flags --> ARRAY BUGD
$NEW --> Array[Int]( $ : _*)


Int collection.mutable.ArrayBuffer[Int]
$NEW --> collection.mutable.ArrayBuffer[Int]( $ : _*)


Int collection.mutable.ArraySeq[Int]
$NEW --> collection.mutable.ArraySeq[Int]( $ : _*)


Int collection.mutable.ArrayStack[Int]
$NEW --> collection.mutable.ArrayStack[Int]( $ : _*)


Int collection.mutable.BitSet
flags --> N S BROKEN
$NEW --> (collection.mutable.BitSet.empty ++ $ )
// Bitsets should be tested, but they're a bit annoying so ignore them for now.


Int collection.mutable.Buffer[Int]
$NEW --> collection.mutable.Buffer[Int]( $ : _*)


Int collection.mutable.DoubleLinkedList[Int]
flags --> DOUBLL
$NEW --> collection.mutable.DoubleLinkedList[Int]( $ : _*)


Int collection.mutable.HashSet[Int]
flags --> S
$NEW --> (collection.mutable.HashSet.empty[Int] ++ $ )


Int collection.mutable.IndexedSeq[Int]
$NEW --> collection.mutable.IndexedSeq[Int]( $ : _*)


Int collection.mutable.Iterable[Int]
$NEW --> collection.mutable.Iterable[Int]( $ : _*)


Int collection.mutable.LinearSeq[Int]
$NEW --> collection.mutable.LinearSeq[Int]( $ : _*)


Int collection.mutable.LinkedHashSet[Int]
flags --> S
$NEW --> (collection.mutable.LinkedHashSet.empty[Int] ++ $ )


Int collection.mutable.LinkedList[Int]
$NEW --> collection.mutable.LinkedList[Int]( $ : _*)


Int collection.mutable.ListBuffer[Int]
$NEW --> collection.mutable.ListBuffer[Int]( $ : _*)


Int collection.mutable.MutableList[Int]
$NEW --> collection.mutable.MutableList[Int]( $ : _*)


Int collection.mutable.PriorityQueue[Int]
flags --> S PQ BROKEN
$NEW --> collection.mutable.PriorityQueue[Int]( $ : _*)
//PriorityQueue is just too weird.


Int collection.mutable.Queue[Int]
$NEW --> collection.mutable.Queue[Int]( $ : _*)


Int collection.mutable.ResizableArray[Int]
$NEW --> collection.mutable.ResizableArray[Int]( $ : _*)


Int collection.mutable.Seq[Int]
$NEW --> collection.mutable.Seq[Int]( $ : _*)


Int collection.mutable.Set[Int]
flags --> S
$NEW --> (collection.mutable.Set.empty[Int] ++ $ )


Int collection.mutable.SortedSet[Int]
flags --> S SORTED
$NEW --> (collection.mutable.SortedSet.empty[Int] ++ $ )


Int collection.mutable.Stack[Int]
$NEW --> collection.mutable.Stack[Int]( $ : _*)


Int collection.mutable.Traversable[Int]
$NEW --> collection.mutable.Traversable[Int]( $ : _*)


Int collection.mutable.TreeSet[Int]
flags --> S SORTED BUGA
$NEW --> (collection.mutable.TreeSet.empty[Int] ++ $ )


Int collection.mutable.UnrolledBuffer[Int]
flags --> USESARRAY
$NEW --> collection.mutable.UnrolledBuffer[Int]( $ : _*)


Int collection.mutable.WrappedArray[Int]
flags --> USESARRAY
$NEW --> (Array[Int]( $ : _*): collection.mutable.WrappedArray[Int])




// Non-leaf types (not already covered in Immutable & Mutable)


Int collection.IndexedSeq[Int]
$NEW --> collection.IndexedSeq[Int]( $ : _*)


Int collection.Iterable[Int]
$NEW --> collection.Iterable[Int]( $ : _*)


Int collection.Iterator[Int]
flags --> ITERATOR LAZY BUGC BUGD
$NEW --> ( $ ).iterator
DEFINITE --> false
AGAIN --> false


Int collection.LinearSeq[Int]
$NEW --> collection.LinearSeq[Int]( $ : _*)


Int collection.Seq[Int]
$NEW --> collection.Seq[Int]( $ : _*)


Int collection.Set[Int]
flags --> S
$NEW --> (collection.Set.empty[Int] ++ $ )


Int collection.SortedSet[Int]
flags --> S SORTED
$NEW --> (collection.SortedSet.empty[Int] ++ $ )


Int collection.Traversable[Int]
$NEW --> collection.Traversable[Int]( $ : _*)


Int collection.TraversableOnce[Int]
flags --> BUGD
$NEW --> (( $ ).iterator: collection.TraversableOnce[Int])
DEFINITE --> false
AGAIN --> false




// Lazy types derived from existing types (lazy or not)

Int collection.TraversableView[Int,Traversable[Int]]
flags --> VIEW LAZY
LET --> val
$NEW --> Traversable[Int]( $ : _*).view


Int collection.TraversableView[Int,Traversable[Int]]
NAME --> collection.TraversableView[Int,Traversable[Int]]Appended
flags --> VIEW LAZY
LET --> val
$NEW --> Traversable[Int]( $ : _*).view.++(Traversable(50,51))


Int collection.TraversableView[Int,Traversable[Int]]
NAME --> collection.TraversableView[Int,Traversable[Int]]DroppedWhile
flags --> VIEW LAZY
LET --> val
$NEW --> Traversable[Int]( $ : _*).view.dropWhile(_ < 2)


Int collection.TraversableView[Int,Traversable[Int]]
NAME --> collection.TraversableView[Int,Traversable[Int]]Filtered
flags --> VIEW LAZY
LET --> val
$NEW --> Traversable[Int]( $ : _*).view.filter(_ > 4)


Int collection.TraversableView[Int,Traversable[Int]]
NAME --> collection.TraversableView[Int,Traversable[Int]]FlatMapped
flags --> VIEW LAZY
LET --> val
$NEW --> Traversable[Int]( $ : _*).view.flatMap(i => Traversable(i, i+2))


Int collection.TraversableView[Int,Traversable[Int]]
NAME --> collection.TraversableView[Int,Traversable[Int]]Mapped
flags --> VIEW LAZY
LET --> val
$NEW --> Traversable[Int]( $ : _*).view.map(_ + 1)


Int collection.TraversableView[Int,Traversable[Int]]
NAME --> collection.TraversableView[Int,Traversable[Int]]Sliced
flags --> VIEW LAZY
LET --> val
$NEW --> Traversable[Int]( $ : _*).view.drop(2)


Int collection.TraversableView[Int,Traversable[Int]]
NAME --> collection.TraversableView[Int,Traversable[Int]]TakenWhile
flags --> VIEW LAZY
LET --> val
$NEW --> Traversable[Int]( $ : _*).view.takeWhile(_ < 6)


Int collection.IterableView[Int,Iterable[Int]]
flags --> VIEW LAZY
LET --> val
$NEW --> Iterable[Int]( $ : _*).view


Int collection.IterableView[Int,Iterable[Int]]
NAME --> collection.IterableView[Int,Iterable[Int]]Appended
flags --> VIEW LAZY
LET --> val
$NEW --> Iterable[Int]( $ : _*).view.++(Iterable(50,51))


Int collection.IterableView[Int,Iterable[Int]]
NAME --> collection.IterableView[Int,Iterable[Int]]DroppedWhile
flags --> VIEW LAZY
LET --> val
$NEW --> Iterable[Int]( $ : _*).view.dropWhile(_ < 2)


Int collection.IterableView[Int,Iterable[Int]]
NAME --> collection.IterableView[Int,Iterable[Int]]Filtered
flags --> VIEW LAZY
LET --> val
$NEW --> Iterable[Int]( $ : _*).view.filter(_ > 4)


Int collection.IterableView[Int,Iterable[Int]]
NAME --> collection.IterableView[Int,Iterable[Int]]FlatMapped
flags --> VIEW LAZY
LET --> val
$NEW --> Iterable[Int]( $ : _*).view.flatMap(i => Iterable(i, i+2))


Int collection.IterableView[Int,Iterable[Int]]
NAME --> collection.IterableView[Int,Iterable[Int]]Mapped
flags --> VIEW LAZY
LET --> val
$NEW --> Iterable[Int]( $ : _*).view.map(_ + 1)


Int collection.IterableView[Int,Iterable[Int]]
NAME --> collection.IterableView[Int,Iterable[Int]]Sliced
flags --> VIEW LAZY
LET --> val
$NEW --> Iterable[Int]( $ : _*).view.drop(2)


Int collection.IterableView[Int,Iterable[Int]]
NAME --> collection.IterableView[Int,Iterable[Int]]TakenWhile
flags --> VIEW LAZY
LET --> val
$NEW --> Iterable[Int]( $ : _*).view.takeWhile(_ < 6)


Int collection.SeqView[Int,Seq[Int]]
flags --> VIEW LAZY BUGC
LET --> val
$NEW --> Seq[Int]( $ : _*).view


Int collection.SeqView[Int,Seq[Int]]
NAME --> collection.SeqView[Int,Seq[Int]]Appended
flags --> VIEW LAZY BUGC
LET --> val
$NEW --> Seq[Int]( $ : _*).view.++(Seq(50,51))


Int collection.SeqView[Int,Seq[Int]]
NAME --> collection.SeqView[Int,Seq[Int]]DroppedWhile
flags --> VIEW LAZY BUGC
LET --> val
$NEW --> Seq[Int]( $ : _*).view.dropWhile(_ < 2)


Int collection.SeqView[Int,Seq[Int]]
NAME --> collection.SeqView[Int,Seq[Int]]Filtered
flags --> VIEW LAZY BUGC
LET --> val
$NEW --> Seq[Int]( $ : _*).view.filter(_ > 4)


Int collection.SeqView[Int,Seq[Int]]
NAME --> collection.SeqView[Int,Seq[Int]]FlatMapped
flags --> VIEW LAZY BUGC
LET --> val
$NEW --> Seq[Int]( $ : _*).view.flatMap(i => Seq(i, i+2))


Int collection.SeqView[Int,Seq[Int]]
NAME --> collection.SeqView[Int,Seq[Int]]Mapped
flags --> VIEW LAZY BUGC
LET --> val
$NEW --> Seq[Int]( $ : _*).view.map(_ + 1)


Int collection.SeqView[Int,Seq[Int]]
NAME --> collection.SeqView[Int,Seq[Int]]Patched
flags --> VIEW LAZY BUGC BROKEN
LET --> val
$NEW --> Seq[Int]( $ : _*).view.patch(1,Seq(50,51),1)
//Broken--patch is all messed up.  This can go in again when patch is fixed (PR in, but a non-negligble change).


Int collection.SeqView[Int,Seq[Int]]
NAME --> collection.SeqView[Int,Seq[Int]]Prepended
flags --> VIEW LAZY BROKEN
LET --> val
$NEW --> Seq[Int]( $ : _*).view.++:(Seq(50,51))
//Broken--won't run instance code.  Weird message.


Int collection.SeqView[Int,Seq[Int]]
NAME --> collection.SeqView[Int,Seq[Int]]Reversed
flags --> VIEW LAZY BUGC
LET --> val
$NEW --> Seq[Int]( $ : _*).view.reverse


Int collection.SeqView[Int,Seq[Int]]
NAME --> collection.SeqView[Int,Seq[Int]]Sliced
flags --> VIEW LAZY BUGC
LET --> val
$NEW --> Seq[Int]( $ : _*).view.drop(2)


Int collection.SeqView[Int,Seq[Int]]
NAME --> collection.SeqView[Int,Seq[Int]]TakenWhile
flags --> VIEW LAZY BUGC
LET --> val
$NEW --> Seq[Int]( $ : _*).view.takeWhile(_ < 6)


Int collection.immutable.StreamView[Int,Stream[Int]]
flags --> VIEW LAZY ADEFINITE BUGC STREAMVIEW
LET --> val
$NEW --> Stream[Int]( $ : _*).view


Int collection.immutable.StreamView[Int,Stream[Int]]
NAME --> collection.immutable.StreamView[Int,Stream[Int]]Appended
flags --> VIEW LAZY ADEFINITE BUGC STREAMVIEW
LET --> val
$NEW --> Stream[Int]( $ : _*).view.++(Stream(50,51))


Int collection.immutable.StreamView[Int,Stream[Int]]
NAME --> collection.immutable.StreamView[Int,Stream[Int]]DroppedWhile
flags --> VIEW LAZY ADEFINITE BUGC STREAMVIEW
LET --> val
$NEW --> Stream[Int]( $ : _*).view.dropWhile(_ < 2)


Int collection.immutable.StreamView[Int,Stream[Int]]
NAME --> collection.immutable.StreamView[Int,Stream[Int]]Filtered
flags --> VIEW LAZY ADEFINITE BUGC STREAMVIEW
LET --> val
$NEW --> Stream[Int]( $ : _*).view.filter(_ > 4)


Int collection.immutable.StreamView[Int,Stream[Int]]
NAME --> collection.immutable.StreamView[Int,Stream[Int]]FlatMapped
flags --> VIEW LAZY ADEFINITE BUGC STREAMVIEW
LET --> val
$NEW --> Stream[Int]( $ : _*).view.flatMap(i => Stream(i, i+2))


Int collection.immutable.StreamView[Int,Stream[Int]]
NAME --> collection.immutable.StreamView[Int,Stream[Int]]Mapped
flags --> VIEW LAZY ADEFINITE BUGC STREAMVIEW
LET --> val
$NEW --> Stream[Int]( $ : _*).view.map(_ + 1)


Int collection.immutable.StreamView[Int,Stream[Int]]
NAME --> collection.immutable.StreamView[Int,Stream[Int]]Patched
flags --> VIEW LAZY ADEFINITE BUGC BROKEN STREAMVIEW
LET --> val
$NEW --> Stream[Int]( $ : _*).view.patch(1,Stream(50,51),1)
//Broken--Patched is messed up for now; when PR is merged this can go in again.


Int collection.immutable.StreamView[Int,Stream[Int]]
NAME --> collection.immutable.StreamView[Int,Stream[Int]]Prepended
flags --> VIEW LAZY ADEFINITE BUGC BROKEN STREAMVIEW
LET --> val
$NEW --> Stream[Int]( $ : _*).view.++:(Stream(50,51))
//Can't seem to create this--java.lang.UnsupportedOperationException: TraversableView.Builder.result


Int collection.immutable.StreamView[Int,Stream[Int]]
NAME --> collection.immutable.StreamView[Int,Stream[Int]]Reversed
flags --> VIEW LAZY ADEFINITE BUGC STREAMVIEW
LET --> val
$NEW --> Stream[Int]( $ : _*).view.reverse


Int collection.immutable.StreamView[Int,Stream[Int]]
NAME --> collection.immutable.StreamView[Int,Stream[Int]]Sliced
flags --> VIEW LAZY ADEFINITE BUGC STREAMVIEW
LET --> val
$NEW --> Stream[Int]( $ : _*).view.drop(2)


Int collection.immutable.StreamView[Int,Stream[Int]]
NAME --> collection.immutable.StreamView[Int,Stream[Int]]TakenWhile
flags --> VIEW LAZY ADEFINITE BUGC STREAMVIEW
LET --> val
$NEW --> Stream[Int]( $ : _*).view.takeWhile(_ < 6)


Int collection.mutable.IndexedSeqView[Int,collection.mutable.IndexedSeq[Int]]
flags --> VIEW LAZY MUVU BROKEN
$NEW --> collection.mutable.IndexedSeq[Int]( $ : _*).view
// Too messed up to take part in tests (at the moment)
