// THIS FILE IS AUTO-GENERATED BY Laws.scala, DO NOT EDIT DIRECTLY
package laws
object Instances { val all = Map(
"Array[Int]" -> (Array[Int]((0 to 0): _*), classOf[Array[Int]]),
"collection.IndexedSeq[Int]" -> (collection.IndexedSeq[Int]((0 to 0): _*), classOf[collection.IndexedSeq[Int]]),
"collection.Iterable[Int]" -> (collection.Iterable[Int]((0 to 0): _*), classOf[collection.Iterable[Int]]),
"collection.Iterator[Int]" -> (((0 to 0)).iterator, classOf[collection.Iterator[Int]]),
"collection.LinearSeq[Int]" -> (collection.LinearSeq[Int]((0 to 0): _*), classOf[collection.LinearSeq[Int]]),
"collection.Seq[Int]" -> (collection.Seq[Int]((0 to 0): _*), classOf[collection.Seq[Int]]),
"collection.Set[Int]" -> ((collection.Set.empty[Int] ++(0 to 0)), classOf[collection.Set[Int]]),
"collection.SortedSet[Int]" -> ((collection.SortedSet.empty[Int] ++(0 to 0)), classOf[collection.SortedSet[Int]]),
"collection.TraversableOnce[Int]" -> ((((0 to 0)).iterator: collection.TraversableOnce[Int]), classOf[collection.TraversableOnce[Int]]),
"collection.Traversable[Int]" -> (collection.Traversable[Int]((0 to 0): _*), classOf[collection.Traversable[Int]]),
"collection.immutable.BitSet" -> (collection.immutable.BitSet((0 to 0): _*), classOf[collection.immutable.BitSet]),
"collection.immutable.HashSet[Int]" -> ((collection.immutable.HashSet.empty[Int] ++(0 to 0)), classOf[collection.immutable.HashSet[Int]]),
"collection.immutable.IndexedSeq[Int]" -> (collection.immutable.IndexedSeq[Int]((0 to 0): _*), classOf[collection.immutable.IndexedSeq[Int]]),
"collection.immutable.Iterable[Int]" -> (collection.immutable.Iterable[Int]((0 to 0): _*), classOf[collection.immutable.Iterable[Int]]),
"collection.immutable.LinearSeq[Int]" -> (collection.immutable.LinearSeq[Int]((0 to 0): _*), classOf[collection.immutable.LinearSeq[Int]]),
"collection.immutable.ListSet[Int]" -> ((collection.immutable.ListSet.empty[Int] ++(0 to 0)), classOf[collection.immutable.ListSet[Int]]),
"collection.immutable.List[Int]" -> (collection.immutable.List[Int]((0 to 0): _*), classOf[collection.immutable.List[Int]]),
"collection.immutable.PagedSeq[Int]" -> (({ val temp =(0 to 0); new collection.immutable.PagedSeq[Int]((a,i,j) => { val t2 = temp.slice(i,j); var k=i; t2.foreach{ x => a(k) = x; k+=1 }; k-i }) }), classOf[collection.immutable.PagedSeq[Int]]),
"collection.immutable.Queue[Int]" -> (collection.immutable.Queue((0 to 0): _*), classOf[collection.immutable.Queue[Int]]),
"collection.immutable.Range" -> (((0 to 0)), classOf[collection.immutable.Range]),
"collection.immutable.Seq[Int]" -> (collection.immutable.Seq((0 to 0): _*), classOf[collection.immutable.Seq[Int]]),
"collection.immutable.Set[Int]" -> ((collection.immutable.Set.empty[Int] ++(0 to 0)), classOf[collection.immutable.Set[Int]]),
"collection.immutable.SortedSet[Int]" -> ((collection.immutable.SortedSet.empty[Int] ++(0 to 0)), classOf[collection.immutable.SortedSet[Int]]),
"collection.immutable.Stack[Int]" -> (collection.immutable.Stack((0 to 0): _*), classOf[collection.immutable.Stack[Int]]),
"collection.immutable.Stream[Int]" -> (((0 to 0)).toStream, classOf[collection.immutable.Stream[Int]]),
"collection.immutable.Traversable[Int]" -> (collection.immutable.Traversable((0 to 0): _*), classOf[collection.immutable.Traversable[Int]]),
"collection.immutable.Vector[Int]" -> (collection.immutable.Vector[Int]((0 to 0): _*), classOf[collection.immutable.Vector[Int]]),
"collection.mutable.ArrayBuffer[Int]" -> (collection.mutable.ArrayBuffer[Int]((0 to 0): _*), classOf[collection.mutable.ArrayBuffer[Int]]),
"collection.mutable.ArraySeq[Int]" -> (collection.mutable.ArraySeq[Int]((0 to 0): _*), classOf[collection.mutable.ArraySeq[Int]]),
"collection.mutable.ArrayStack[Int]" -> (collection.mutable.ArrayStack[Int]((0 to 0): _*), classOf[collection.mutable.ArrayStack[Int]]),
"collection.mutable.BitSet" -> ((collection.mutable.BitSet.empty ++(0 to 0)), classOf[collection.mutable.BitSet]),
"collection.mutable.Buffer[Int]" -> (collection.mutable.Buffer[Int]((0 to 0): _*), classOf[collection.mutable.Buffer[Int]]),
"collection.mutable.DoubleLinkedList[Int]" -> (collection.mutable.DoubleLinkedList[Int]((0 to 0): _*), classOf[collection.mutable.DoubleLinkedList[Int]]),
"collection.mutable.HashSet[Int]" -> ((collection.mutable.HashSet.empty[Int] ++(0 to 0)), classOf[collection.mutable.HashSet[Int]]),
"collection.mutable.IndexedSeq[Int]" -> (collection.mutable.IndexedSeq[Int]((0 to 0): _*), classOf[collection.mutable.IndexedSeq[Int]]),
"collection.mutable.Iterable[Int]" -> (collection.mutable.Iterable[Int]((0 to 0): _*), classOf[collection.mutable.Iterable[Int]]),
"collection.mutable.LinearSeq[Int]" -> (collection.mutable.LinearSeq[Int]((0 to 0): _*), classOf[collection.mutable.LinearSeq[Int]]),
"collection.mutable.LinkedHashSet[Int]" -> ((collection.mutable.LinkedHashSet.empty[Int] ++(0 to 0)), classOf[collection.mutable.LinkedHashSet[Int]]),
"collection.mutable.LinkedList[Int]" -> (collection.mutable.LinkedList[Int]((0 to 0): _*), classOf[collection.mutable.LinkedList[Int]]),
"collection.mutable.ListBuffer[Int]" -> (collection.mutable.ListBuffer[Int]((0 to 0): _*), classOf[collection.mutable.ListBuffer[Int]]),
"collection.mutable.MutableList[Int]" -> (collection.mutable.MutableList[Int]((0 to 0): _*), classOf[collection.mutable.MutableList[Int]]),
"collection.mutable.PriorityQueue[Int]" -> (collection.mutable.PriorityQueue[Int]((0 to 0): _*), classOf[collection.mutable.PriorityQueue[Int]]),
"collection.mutable.Queue[Int]" -> (collection.mutable.Queue[Int]((0 to 0): _*), classOf[collection.mutable.Queue[Int]]),
"collection.mutable.ResizableArray[Int]" -> (collection.mutable.ResizableArray[Int]((0 to 0): _*), classOf[collection.mutable.ResizableArray[Int]]),
"collection.mutable.Seq[Int]" -> (collection.mutable.Seq[Int]((0 to 0): _*), classOf[collection.mutable.Seq[Int]]),
"collection.mutable.Set[Int]" -> ((collection.mutable.Set.empty[Int] ++(0 to 0)), classOf[collection.mutable.Set[Int]]),
"collection.mutable.SortedSet[Int]" -> ((collection.mutable.SortedSet.empty[Int] ++(0 to 0)), classOf[collection.mutable.SortedSet[Int]]),
"collection.mutable.Stack[Int]" -> (collection.mutable.Stack[Int]((0 to 0): _*), classOf[collection.mutable.Stack[Int]]),
"collection.mutable.Traversable[Int]" -> (collection.mutable.Traversable[Int]((0 to 0): _*), classOf[collection.mutable.Traversable[Int]]),
"collection.mutable.TreeSet[Int]" -> ((collection.mutable.TreeSet.empty[Int] ++(0 to 0)), classOf[collection.mutable.TreeSet[Int]]),
"collection.mutable.UnrolledBuffer[Int]" -> (collection.mutable.UnrolledBuffer[Int]((0 to 0): _*), classOf[collection.mutable.UnrolledBuffer[Int]]),
"collection.mutable.WrappedArray[Int]" -> ((Array[Int]((0 to 0): _*): collection.mutable.WrappedArray[Int]), classOf[collection.mutable.WrappedArray[Int]]),
  "" -> null)
}
