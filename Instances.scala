// THIS FILE IS AUTO-GENERATED BY Laws.scala, DO NOT EDIT DIRECTLY
package laws
object Instances {
  val inst_collection_immutable_HashSet_Int_ = (classOf[collection.immutable.HashSet[Int]], (collection.immutable.HashSet.empty[Int] ++ (0 to 0) ))
  val inst_collection_immutable_IndexedSeq_Int_ = (classOf[collection.immutable.IndexedSeq[Int]], collection.immutable.IndexedSeq[Int]( (0 to 0) : _*))
  val inst_collection_immutable_Iterable_Int_ = (classOf[collection.immutable.Iterable[Int]], collection.immutable.Iterable[Int]( (0 to 0) : _*))
  val inst_collection_immutable_LinearSeq_Int_ = (classOf[collection.immutable.LinearSeq[Int]], collection.immutable.LinearSeq[Int]( (0 to 0) : _*))
  val inst_collection_immutable_List_Int_ = (classOf[collection.immutable.List[Int]], collection.immutable.List[Int]( (0 to 0) : _*))
  val inst_collection_immutable_ListSet_Int_ = (classOf[collection.immutable.ListSet[Int]], (collection.immutable.ListSet.empty[Int] ++ (0 to 0) ))
  val inst_collection_immutable_Queue_Int_ = (classOf[collection.immutable.Queue[Int]], collection.immutable.Queue( (0 to 0) : _*))
  val inst_collection_immutable_Range = (classOf[collection.immutable.Range], ( (0 to 0) : collection.immutable.Range ))
  val inst_collection_immutable_Seq_Int_ = (classOf[collection.immutable.Seq[Int]], collection.immutable.Seq( (0 to 0) : _*))
  val inst_collection_immutable_Set_Int_ = (classOf[collection.immutable.Set[Int]], (collection.immutable.Set.empty[Int] ++ (0 to 0) ))
  val inst_collection_immutable_SortedSet_Int_ = (classOf[collection.immutable.SortedSet[Int]], (collection.immutable.SortedSet.empty[Int] ++ (0 to 0) ))
  val inst_collection_immutable_Stack_Int_ = (classOf[collection.immutable.Stack[Int]], collection.immutable.Stack( (0 to 0) : _*))
  val inst_collection_immutable_Stream_Int_ = (classOf[collection.immutable.Stream[Int]], ( (0 to 0) ).toStream)
  val inst_collection_immutable_Traversable_Int_ = (classOf[collection.immutable.Traversable[Int]], collection.immutable.Traversable( (0 to 0) : _*))
  val inst_collection_immutable_TreeSet_Int_ = (classOf[collection.immutable.TreeSet[Int]], collection.immutable.TreeSet( (0 to 0) : _* ))
  val inst_collection_immutable_Vector_Int_ = (classOf[collection.immutable.Vector[Int]], collection.immutable.Vector[Int]( (0 to 0) : _*))
  val inst_Array_Int_ = (classOf[collection.mutable.WrappedArray[Int]], Array[Int]( (0 to 0) : _*))
  val inst_collection_mutable_ArrayBuffer_Int_ = (classOf[collection.mutable.ArrayBuffer[Int]], collection.mutable.ArrayBuffer[Int]( (0 to 0) : _*))
  val inst_collection_mutable_ArraySeq_Int_ = (classOf[collection.mutable.ArraySeq[Int]], collection.mutable.ArraySeq[Int]( (0 to 0) : _*))
  val inst_collection_mutable_ArrayStack_Int_ = (classOf[collection.mutable.ArrayStack[Int]], collection.mutable.ArrayStack[Int]( (0 to 0) : _*))
  val inst_collection_mutable_Buffer_Int_ = (classOf[collection.mutable.Buffer[Int]], collection.mutable.Buffer[Int]( (0 to 0) : _*))
  val inst_collection_mutable_DoubleLinkedList_Int_ = (classOf[collection.mutable.DoubleLinkedList[Int]], collection.mutable.DoubleLinkedList[Int]( (0 to 0) : _*))
  val inst_collection_mutable_HashSet_Int_ = (classOf[collection.mutable.HashSet[Int]], (collection.mutable.HashSet.empty[Int] ++ (0 to 0) ))
  val inst_collection_mutable_IndexedSeq_Int_ = (classOf[collection.mutable.IndexedSeq[Int]], collection.mutable.IndexedSeq[Int]( (0 to 0) : _*))
  val inst_collection_mutable_Iterable_Int_ = (classOf[collection.mutable.Iterable[Int]], collection.mutable.Iterable[Int]( (0 to 0) : _*))
  val inst_collection_mutable_LinearSeq_Int_ = (classOf[collection.mutable.LinearSeq[Int]], collection.mutable.LinearSeq[Int]( (0 to 0) : _*))
  val inst_collection_mutable_LinkedHashSet_Int_ = (classOf[collection.mutable.LinkedHashSet[Int]], (collection.mutable.LinkedHashSet.empty[Int] ++ (0 to 0) ))
  val inst_collection_mutable_LinkedList_Int_ = (classOf[collection.mutable.LinkedList[Int]], collection.mutable.LinkedList[Int]( (0 to 0) : _*))
  val inst_collection_mutable_ListBuffer_Int_ = (classOf[collection.mutable.ListBuffer[Int]], collection.mutable.ListBuffer[Int]( (0 to 0) : _*))
  val inst_collection_mutable_MutableList_Int_ = (classOf[collection.mutable.MutableList[Int]], collection.mutable.MutableList[Int]( (0 to 0) : _*))
  val inst_collection_mutable_Queue_Int_ = (classOf[collection.mutable.Queue[Int]], collection.mutable.Queue[Int]( (0 to 0) : _*))
  val inst_collection_mutable_ResizableArray_Int_ = (classOf[collection.mutable.ResizableArray[Int]], collection.mutable.ResizableArray[Int]( (0 to 0) : _*))
  val inst_collection_mutable_Seq_Int_ = (classOf[collection.mutable.Seq[Int]], collection.mutable.Seq[Int]( (0 to 0) : _*))
  val inst_collection_mutable_Set_Int_ = (classOf[collection.mutable.Set[Int]], (collection.mutable.Set.empty[Int] ++ (0 to 0) ))
  val inst_collection_mutable_SortedSet_Int_ = (classOf[collection.mutable.SortedSet[Int]], (collection.mutable.SortedSet.empty[Int] ++ (0 to 0) ))
  val inst_collection_mutable_Stack_Int_ = (classOf[collection.mutable.Stack[Int]], collection.mutable.Stack[Int]( (0 to 0) : _*))
  val inst_collection_mutable_Traversable_Int_ = (classOf[collection.mutable.Traversable[Int]], collection.mutable.Traversable[Int]( (0 to 0) : _*))
  val inst_collection_mutable_TreeSet_Int_ = (classOf[collection.mutable.TreeSet[Int]], (collection.mutable.TreeSet.empty[Int] ++ (0 to 0) ))
  val inst_collection_mutable_UnrolledBuffer_Int_ = (classOf[collection.mutable.UnrolledBuffer[Int]], collection.mutable.UnrolledBuffer[Int]( (0 to 0) : _*))
  val inst_collection_mutable_WrappedArray_Int_ = (classOf[collection.mutable.WrappedArray[Int]], (Array[Int]( (0 to 0) : _*): collection.mutable.WrappedArray[Int]))
  val inst_collection_IndexedSeq_Int_ = (classOf[collection.IndexedSeq[Int]], collection.IndexedSeq[Int]( (0 to 0) : _*))
  val inst_collection_Iterable_Int_ = (classOf[collection.Iterable[Int]], collection.Iterable[Int]( (0 to 0) : _*))
  val inst_collection_Iterator_Int_ = (classOf[collection.Iterator[Int]], ( (0 to 0) ).iterator)
  val inst_collection_LinearSeq_Int_ = (classOf[collection.LinearSeq[Int]], collection.LinearSeq[Int]( (0 to 0) : _*))
  val inst_collection_Seq_Int_ = (classOf[collection.Seq[Int]], collection.Seq[Int]( (0 to 0) : _*))
  val inst_collection_Set_Int_ = (classOf[collection.Set[Int]], (collection.Set.empty[Int] ++ (0 to 0) ))
  val inst_collection_SortedSet_Int_ = (classOf[collection.SortedSet[Int]], (collection.SortedSet.empty[Int] ++ (0 to 0) ))
  val inst_collection_Traversable_Int_ = (classOf[collection.Traversable[Int]], collection.Traversable[Int]( (0 to 0) : _*))
  val inst_collection_TraversableOnce_Int_ = (classOf[collection.TraversableOnce[Int]], (( (0 to 0) ).iterator: collection.TraversableOnce[Int]))
  val inst_collection_TraversableView_Int_Traversable_Int__ = (classOf[collection.TraversableView[Int,Traversable[Int]]], Traversable( (0 to 0) : _*).view)
  val inst_collection_TraversableView_Int_Traversable_Int__Appended = (classOf[collection.TraversableView[Int,Traversable[Int]]], Traversable( (0 to 0) : _*).view.++(Traversable(50,51)))
  val inst_collection_TraversableView_Int_Traversable_Int__DroppedWhile = (classOf[collection.TraversableView[Int,Traversable[Int]]], Traversable( (0 to 0) : _*).view.dropWhile(_ < 2))
  val inst_collection_TraversableView_Int_Traversable_Int__Filtered = (classOf[collection.TraversableView[Int,Traversable[Int]]], Traversable( (0 to 0) : _*).view.filter(_ > 4))
  val inst_collection_TraversableView_Int_Traversable_Int__FlatMapped = (classOf[collection.TraversableView[Int,Traversable[Int]]], Traversable( (0 to 0) : _*).view.flatMap(i => Traversable(i, i+2)))
  val inst_collection_TraversableView_Int_Traversable_Int__Mapped = (classOf[collection.TraversableView[Int,Traversable[Int]]], Traversable( (0 to 0) : _*).view.map(_ + 1))
  val inst_collection_TraversableView_Int_Traversable_Int__Sliced = (classOf[collection.TraversableView[Int,Traversable[Int]]], Traversable( (0 to 0) : _*).view.drop(2))
  val inst_collection_TraversableView_Int_Traversable_Int__TakenWhile = (classOf[collection.TraversableView[Int,Traversable[Int]]], Traversable( (0 to 0) : _*).view.takeWhile(_ < 6))
  val inst_collection_IterableView_Int_Iterable_Int__ = (classOf[collection.IterableView[Int,Iterable[Int]]], Iterable( (0 to 0) : _*).view)
  val inst_collection_IterableView_Int_Iterable_Int__Appended = (classOf[collection.IterableView[Int,Iterable[Int]]], Iterable( (0 to 0) : _*).view.++(Iterable(50,51)))
  val inst_collection_IterableView_Int_Iterable_Int__DroppedWhile = (classOf[collection.IterableView[Int,Iterable[Int]]], Iterable( (0 to 0) : _*).view.dropWhile(_ < 2))
  val inst_collection_IterableView_Int_Iterable_Int__Filtered = (classOf[collection.IterableView[Int,Iterable[Int]]], Iterable( (0 to 0) : _*).view.filter(_ > 4))
  val inst_collection_IterableView_Int_Iterable_Int__FlatMapped = (classOf[collection.IterableView[Int,Iterable[Int]]], Iterable( (0 to 0) : _*).view.flatMap(i => Iterable(i, i+2)))
  val inst_collection_IterableView_Int_Iterable_Int__Mapped = (classOf[collection.IterableView[Int,Iterable[Int]]], Iterable( (0 to 0) : _*).view.map(_ + 1))
  val inst_collection_IterableView_Int_Iterable_Int__Sliced = (classOf[collection.IterableView[Int,Iterable[Int]]], Iterable( (0 to 0) : _*).view.drop(2))
  val inst_collection_IterableView_Int_Iterable_Int__TakenWhile = (classOf[collection.IterableView[Int,Iterable[Int]]], Iterable( (0 to 0) : _*).view.takeWhile(_ < 6))
  val inst_collection_SeqView_Int_Seq_Int__ = (classOf[collection.SeqView[Int,Seq[Int]]], Seq( (0 to 0) : _*).view)
  val inst_collection_SeqView_Int_Seq_Int__Appended = (classOf[collection.SeqView[Int,Seq[Int]]], Seq( (0 to 0) : _*).view.++(Seq(50,51)))
  val inst_collection_SeqView_Int_Seq_Int__DroppedWhile = (classOf[collection.SeqView[Int,Seq[Int]]], Seq( (0 to 0) : _*).view.dropWhile(_ < 2))
  val inst_collection_SeqView_Int_Seq_Int__Filtered = (classOf[collection.SeqView[Int,Seq[Int]]], Seq( (0 to 0) : _*).view.filter(_ > 4))
  val inst_collection_SeqView_Int_Seq_Int__FlatMapped = (classOf[collection.SeqView[Int,Seq[Int]]], Seq( (0 to 0) : _*).view.flatMap(i => Seq(i, i+2)))
  val inst_collection_SeqView_Int_Seq_Int__Mapped = (classOf[collection.SeqView[Int,Seq[Int]]], Seq( (0 to 0) : _*).view.map(_ + 1))
  val inst_collection_SeqView_Int_Seq_Int__Patched = (classOf[collection.SeqView[Int,Seq[Int]]], Seq( (0 to 0) : _*).view.patch(1,Seq(50,51),1))
  val inst_collection_SeqView_Int_Seq_Int__Reversed = (classOf[collection.SeqView[Int,Seq[Int]]], Seq( (0 to 0) : _*).view.reverse)
  val inst_collection_SeqView_Int_Seq_Int__Sliced = (classOf[collection.SeqView[Int,Seq[Int]]], Seq( (0 to 0) : _*).view.drop(2))
  val inst_collection_SeqView_Int_Seq_Int__TakenWhile = (classOf[collection.SeqView[Int,Seq[Int]]], Seq( (0 to 0) : _*).view.takeWhile(_ < 6))
  val inst_collection_immutable_StreamView_Int_Stream_Int__ = (classOf[collection.immutable.StreamView[Int,Stream[Int]]], Stream( (0 to 0) : _*).view)
  val inst_collection_immutable_StreamView_Int_Stream_Int__Appended = (classOf[collection.immutable.StreamView[Int,Stream[Int]]], Stream( (0 to 0) : _*).view.++(Stream(50,51)))
  val inst_collection_immutable_StreamView_Int_Stream_Int__DroppedWhile = (classOf[collection.immutable.StreamView[Int,Stream[Int]]], Stream( (0 to 0) : _*).view.dropWhile(_ < 2))
  val inst_collection_immutable_StreamView_Int_Stream_Int__Filtered = (classOf[collection.immutable.StreamView[Int,Stream[Int]]], Stream( (0 to 0) : _*).view.filter(_ > 4))
  val inst_collection_immutable_StreamView_Int_Stream_Int__FlatMapped = (classOf[collection.immutable.StreamView[Int,Stream[Int]]], Stream( (0 to 0) : _*).view.flatMap(i => Stream(i, i+2)))
  val inst_collection_immutable_StreamView_Int_Stream_Int__Mapped = (classOf[collection.immutable.StreamView[Int,Stream[Int]]], Stream( (0 to 0) : _*).view.map(_ + 1))
  val inst_collection_immutable_StreamView_Int_Stream_Int__Patched = (classOf[collection.immutable.StreamView[Int,Stream[Int]]], Stream( (0 to 0) : _*).view.patch(1,Stream(50,51),1))
  val inst_collection_immutable_StreamView_Int_Stream_Int__Reversed = (classOf[collection.immutable.StreamView[Int,Stream[Int]]], Stream( (0 to 0) : _*).view.reverse)
  val inst_collection_immutable_StreamView_Int_Stream_Int__Sliced = (classOf[collection.immutable.StreamView[Int,Stream[Int]]], Stream( (0 to 0) : _*).view.drop(2))
  val inst_collection_immutable_StreamView_Int_Stream_Int__TakenWhile = (classOf[collection.immutable.StreamView[Int,Stream[Int]]], Stream( (0 to 0) : _*).view.takeWhile(_ < 6))
  val mapped: Map[String, Set[String]] = Map(
    "collection.immutable.HashSet[Int]" -> laws.MethodFinder(inst_collection_immutable_HashSet_Int_._1, inst_collection_immutable_HashSet_Int_._2 ),
    "collection.immutable.IndexedSeq[Int]" -> laws.MethodFinder(inst_collection_immutable_IndexedSeq_Int_._1, inst_collection_immutable_IndexedSeq_Int_._2 ),
    "collection.immutable.Iterable[Int]" -> laws.MethodFinder(inst_collection_immutable_Iterable_Int_._1, inst_collection_immutable_Iterable_Int_._2 ),
    "collection.immutable.LinearSeq[Int]" -> laws.MethodFinder(inst_collection_immutable_LinearSeq_Int_._1, inst_collection_immutable_LinearSeq_Int_._2 ),
    "collection.immutable.List[Int]" -> laws.MethodFinder(inst_collection_immutable_List_Int_._1, inst_collection_immutable_List_Int_._2 ),
    "collection.immutable.ListSet[Int]" -> laws.MethodFinder(inst_collection_immutable_ListSet_Int_._1, inst_collection_immutable_ListSet_Int_._2 ),
    "collection.immutable.Queue[Int]" -> laws.MethodFinder(inst_collection_immutable_Queue_Int_._1, inst_collection_immutable_Queue_Int_._2 ),
    "collection.immutable.Range" -> laws.MethodFinder(inst_collection_immutable_Range._1, inst_collection_immutable_Range._2 ),
    "collection.immutable.Seq[Int]" -> laws.MethodFinder(inst_collection_immutable_Seq_Int_._1, inst_collection_immutable_Seq_Int_._2 ),
    "collection.immutable.Set[Int]" -> laws.MethodFinder(inst_collection_immutable_Set_Int_._1, inst_collection_immutable_Set_Int_._2 ),
    "collection.immutable.SortedSet[Int]" -> laws.MethodFinder(inst_collection_immutable_SortedSet_Int_._1, inst_collection_immutable_SortedSet_Int_._2 ),
    "collection.immutable.Stack[Int]" -> laws.MethodFinder(inst_collection_immutable_Stack_Int_._1, inst_collection_immutable_Stack_Int_._2 ),
    "collection.immutable.Stream[Int]" -> laws.MethodFinder(inst_collection_immutable_Stream_Int_._1, inst_collection_immutable_Stream_Int_._2 ),
    "collection.immutable.Traversable[Int]" -> laws.MethodFinder(inst_collection_immutable_Traversable_Int_._1, inst_collection_immutable_Traversable_Int_._2 ),
    "collection.immutable.TreeSet[Int]" -> laws.MethodFinder(inst_collection_immutable_TreeSet_Int_._1, inst_collection_immutable_TreeSet_Int_._2 ),
    "collection.immutable.Vector[Int]" -> laws.MethodFinder(inst_collection_immutable_Vector_Int_._1, inst_collection_immutable_Vector_Int_._2 ),
    "Array[Int]" -> laws.MethodFinder(inst_Array_Int_._1, inst_Array_Int_._2 ),
    "collection.mutable.ArrayBuffer[Int]" -> laws.MethodFinder(inst_collection_mutable_ArrayBuffer_Int_._1, inst_collection_mutable_ArrayBuffer_Int_._2 ),
    "collection.mutable.ArraySeq[Int]" -> laws.MethodFinder(inst_collection_mutable_ArraySeq_Int_._1, inst_collection_mutable_ArraySeq_Int_._2 ),
    "collection.mutable.ArrayStack[Int]" -> laws.MethodFinder(inst_collection_mutable_ArrayStack_Int_._1, inst_collection_mutable_ArrayStack_Int_._2 ),
    "collection.mutable.Buffer[Int]" -> laws.MethodFinder(inst_collection_mutable_Buffer_Int_._1, inst_collection_mutable_Buffer_Int_._2 ),
    "collection.mutable.DoubleLinkedList[Int]" -> laws.MethodFinder(inst_collection_mutable_DoubleLinkedList_Int_._1, inst_collection_mutable_DoubleLinkedList_Int_._2 ),
    "collection.mutable.HashSet[Int]" -> laws.MethodFinder(inst_collection_mutable_HashSet_Int_._1, inst_collection_mutable_HashSet_Int_._2 ),
    "collection.mutable.IndexedSeq[Int]" -> laws.MethodFinder(inst_collection_mutable_IndexedSeq_Int_._1, inst_collection_mutable_IndexedSeq_Int_._2 ),
    "collection.mutable.Iterable[Int]" -> laws.MethodFinder(inst_collection_mutable_Iterable_Int_._1, inst_collection_mutable_Iterable_Int_._2 ),
    "collection.mutable.LinearSeq[Int]" -> laws.MethodFinder(inst_collection_mutable_LinearSeq_Int_._1, inst_collection_mutable_LinearSeq_Int_._2 ),
    "collection.mutable.LinkedHashSet[Int]" -> laws.MethodFinder(inst_collection_mutable_LinkedHashSet_Int_._1, inst_collection_mutable_LinkedHashSet_Int_._2 ),
    "collection.mutable.LinkedList[Int]" -> laws.MethodFinder(inst_collection_mutable_LinkedList_Int_._1, inst_collection_mutable_LinkedList_Int_._2 ),
    "collection.mutable.ListBuffer[Int]" -> laws.MethodFinder(inst_collection_mutable_ListBuffer_Int_._1, inst_collection_mutable_ListBuffer_Int_._2 ),
    "collection.mutable.MutableList[Int]" -> laws.MethodFinder(inst_collection_mutable_MutableList_Int_._1, inst_collection_mutable_MutableList_Int_._2 ),
    "collection.mutable.Queue[Int]" -> laws.MethodFinder(inst_collection_mutable_Queue_Int_._1, inst_collection_mutable_Queue_Int_._2 ),
    "collection.mutable.ResizableArray[Int]" -> laws.MethodFinder(inst_collection_mutable_ResizableArray_Int_._1, inst_collection_mutable_ResizableArray_Int_._2 ),
    "collection.mutable.Seq[Int]" -> laws.MethodFinder(inst_collection_mutable_Seq_Int_._1, inst_collection_mutable_Seq_Int_._2 ),
    "collection.mutable.Set[Int]" -> laws.MethodFinder(inst_collection_mutable_Set_Int_._1, inst_collection_mutable_Set_Int_._2 ),
    "collection.mutable.SortedSet[Int]" -> laws.MethodFinder(inst_collection_mutable_SortedSet_Int_._1, inst_collection_mutable_SortedSet_Int_._2 ),
    "collection.mutable.Stack[Int]" -> laws.MethodFinder(inst_collection_mutable_Stack_Int_._1, inst_collection_mutable_Stack_Int_._2 ),
    "collection.mutable.Traversable[Int]" -> laws.MethodFinder(inst_collection_mutable_Traversable_Int_._1, inst_collection_mutable_Traversable_Int_._2 ),
    "collection.mutable.TreeSet[Int]" -> laws.MethodFinder(inst_collection_mutable_TreeSet_Int_._1, inst_collection_mutable_TreeSet_Int_._2 ),
    "collection.mutable.UnrolledBuffer[Int]" -> laws.MethodFinder(inst_collection_mutable_UnrolledBuffer_Int_._1, inst_collection_mutable_UnrolledBuffer_Int_._2 ),
    "collection.mutable.WrappedArray[Int]" -> laws.MethodFinder(inst_collection_mutable_WrappedArray_Int_._1, inst_collection_mutable_WrappedArray_Int_._2 ),
    "collection.IndexedSeq[Int]" -> laws.MethodFinder(inst_collection_IndexedSeq_Int_._1, inst_collection_IndexedSeq_Int_._2 ),
    "collection.Iterable[Int]" -> laws.MethodFinder(inst_collection_Iterable_Int_._1, inst_collection_Iterable_Int_._2 ),
    "collection.Iterator[Int]" -> laws.MethodFinder(inst_collection_Iterator_Int_._1, inst_collection_Iterator_Int_._2 ),
    "collection.LinearSeq[Int]" -> laws.MethodFinder(inst_collection_LinearSeq_Int_._1, inst_collection_LinearSeq_Int_._2 ),
    "collection.Seq[Int]" -> laws.MethodFinder(inst_collection_Seq_Int_._1, inst_collection_Seq_Int_._2 ),
    "collection.Set[Int]" -> laws.MethodFinder(inst_collection_Set_Int_._1, inst_collection_Set_Int_._2 ),
    "collection.SortedSet[Int]" -> laws.MethodFinder(inst_collection_SortedSet_Int_._1, inst_collection_SortedSet_Int_._2 ),
    "collection.Traversable[Int]" -> laws.MethodFinder(inst_collection_Traversable_Int_._1, inst_collection_Traversable_Int_._2 ),
    "collection.TraversableOnce[Int]" -> laws.MethodFinder(inst_collection_TraversableOnce_Int_._1, inst_collection_TraversableOnce_Int_._2 ),
    "collection.TraversableView[Int,Traversable[Int]]" -> laws.MethodFinder(inst_collection_TraversableView_Int_Traversable_Int__._1, inst_collection_TraversableView_Int_Traversable_Int__._2 ),
    "collection.TraversableView[Int,Traversable[Int]]Appended" -> laws.MethodFinder(inst_collection_TraversableView_Int_Traversable_Int__Appended._1, inst_collection_TraversableView_Int_Traversable_Int__Appended._2 ),
    "collection.TraversableView[Int,Traversable[Int]]DroppedWhile" -> laws.MethodFinder(inst_collection_TraversableView_Int_Traversable_Int__DroppedWhile._1, inst_collection_TraversableView_Int_Traversable_Int__DroppedWhile._2 ),
    "collection.TraversableView[Int,Traversable[Int]]Filtered" -> laws.MethodFinder(inst_collection_TraversableView_Int_Traversable_Int__Filtered._1, inst_collection_TraversableView_Int_Traversable_Int__Filtered._2 ),
    "collection.TraversableView[Int,Traversable[Int]]FlatMapped" -> laws.MethodFinder(inst_collection_TraversableView_Int_Traversable_Int__FlatMapped._1, inst_collection_TraversableView_Int_Traversable_Int__FlatMapped._2 ),
    "collection.TraversableView[Int,Traversable[Int]]Mapped" -> laws.MethodFinder(inst_collection_TraversableView_Int_Traversable_Int__Mapped._1, inst_collection_TraversableView_Int_Traversable_Int__Mapped._2 ),
    "collection.TraversableView[Int,Traversable[Int]]Sliced" -> laws.MethodFinder(inst_collection_TraversableView_Int_Traversable_Int__Sliced._1, inst_collection_TraversableView_Int_Traversable_Int__Sliced._2 ),
    "collection.TraversableView[Int,Traversable[Int]]TakenWhile" -> laws.MethodFinder(inst_collection_TraversableView_Int_Traversable_Int__TakenWhile._1, inst_collection_TraversableView_Int_Traversable_Int__TakenWhile._2 ),
    "collection.IterableView[Int,Iterable[Int]]" -> laws.MethodFinder(inst_collection_IterableView_Int_Iterable_Int__._1, inst_collection_IterableView_Int_Iterable_Int__._2 ),
    "collection.IterableView[Int,Iterable[Int]]Appended" -> laws.MethodFinder(inst_collection_IterableView_Int_Iterable_Int__Appended._1, inst_collection_IterableView_Int_Iterable_Int__Appended._2 ),
    "collection.IterableView[Int,Iterable[Int]]DroppedWhile" -> laws.MethodFinder(inst_collection_IterableView_Int_Iterable_Int__DroppedWhile._1, inst_collection_IterableView_Int_Iterable_Int__DroppedWhile._2 ),
    "collection.IterableView[Int,Iterable[Int]]Filtered" -> laws.MethodFinder(inst_collection_IterableView_Int_Iterable_Int__Filtered._1, inst_collection_IterableView_Int_Iterable_Int__Filtered._2 ),
    "collection.IterableView[Int,Iterable[Int]]FlatMapped" -> laws.MethodFinder(inst_collection_IterableView_Int_Iterable_Int__FlatMapped._1, inst_collection_IterableView_Int_Iterable_Int__FlatMapped._2 ),
    "collection.IterableView[Int,Iterable[Int]]Mapped" -> laws.MethodFinder(inst_collection_IterableView_Int_Iterable_Int__Mapped._1, inst_collection_IterableView_Int_Iterable_Int__Mapped._2 ),
    "collection.IterableView[Int,Iterable[Int]]Sliced" -> laws.MethodFinder(inst_collection_IterableView_Int_Iterable_Int__Sliced._1, inst_collection_IterableView_Int_Iterable_Int__Sliced._2 ),
    "collection.IterableView[Int,Iterable[Int]]TakenWhile" -> laws.MethodFinder(inst_collection_IterableView_Int_Iterable_Int__TakenWhile._1, inst_collection_IterableView_Int_Iterable_Int__TakenWhile._2 ),
    "collection.SeqView[Int,Seq[Int]]" -> laws.MethodFinder(inst_collection_SeqView_Int_Seq_Int__._1, inst_collection_SeqView_Int_Seq_Int__._2 ),
    "collection.SeqView[Int,Seq[Int]]Appended" -> laws.MethodFinder(inst_collection_SeqView_Int_Seq_Int__Appended._1, inst_collection_SeqView_Int_Seq_Int__Appended._2 ),
    "collection.SeqView[Int,Seq[Int]]DroppedWhile" -> laws.MethodFinder(inst_collection_SeqView_Int_Seq_Int__DroppedWhile._1, inst_collection_SeqView_Int_Seq_Int__DroppedWhile._2 ),
    "collection.SeqView[Int,Seq[Int]]Filtered" -> laws.MethodFinder(inst_collection_SeqView_Int_Seq_Int__Filtered._1, inst_collection_SeqView_Int_Seq_Int__Filtered._2 ),
    "collection.SeqView[Int,Seq[Int]]FlatMapped" -> laws.MethodFinder(inst_collection_SeqView_Int_Seq_Int__FlatMapped._1, inst_collection_SeqView_Int_Seq_Int__FlatMapped._2 ),
    "collection.SeqView[Int,Seq[Int]]Mapped" -> laws.MethodFinder(inst_collection_SeqView_Int_Seq_Int__Mapped._1, inst_collection_SeqView_Int_Seq_Int__Mapped._2 ),
    "collection.SeqView[Int,Seq[Int]]Patched" -> laws.MethodFinder(inst_collection_SeqView_Int_Seq_Int__Patched._1, inst_collection_SeqView_Int_Seq_Int__Patched._2 ),
    "collection.SeqView[Int,Seq[Int]]Reversed" -> laws.MethodFinder(inst_collection_SeqView_Int_Seq_Int__Reversed._1, inst_collection_SeqView_Int_Seq_Int__Reversed._2 ),
    "collection.SeqView[Int,Seq[Int]]Sliced" -> laws.MethodFinder(inst_collection_SeqView_Int_Seq_Int__Sliced._1, inst_collection_SeqView_Int_Seq_Int__Sliced._2 ),
    "collection.SeqView[Int,Seq[Int]]TakenWhile" -> laws.MethodFinder(inst_collection_SeqView_Int_Seq_Int__TakenWhile._1, inst_collection_SeqView_Int_Seq_Int__TakenWhile._2 ),
    "collection.immutable.StreamView[Int,Stream[Int]]" -> laws.MethodFinder(inst_collection_immutable_StreamView_Int_Stream_Int__._1, inst_collection_immutable_StreamView_Int_Stream_Int__._2 ),
    "collection.immutable.StreamView[Int,Stream[Int]]Appended" -> laws.MethodFinder(inst_collection_immutable_StreamView_Int_Stream_Int__Appended._1, inst_collection_immutable_StreamView_Int_Stream_Int__Appended._2 ),
    "collection.immutable.StreamView[Int,Stream[Int]]DroppedWhile" -> laws.MethodFinder(inst_collection_immutable_StreamView_Int_Stream_Int__DroppedWhile._1, inst_collection_immutable_StreamView_Int_Stream_Int__DroppedWhile._2 ),
    "collection.immutable.StreamView[Int,Stream[Int]]Filtered" -> laws.MethodFinder(inst_collection_immutable_StreamView_Int_Stream_Int__Filtered._1, inst_collection_immutable_StreamView_Int_Stream_Int__Filtered._2 ),
    "collection.immutable.StreamView[Int,Stream[Int]]FlatMapped" -> laws.MethodFinder(inst_collection_immutable_StreamView_Int_Stream_Int__FlatMapped._1, inst_collection_immutable_StreamView_Int_Stream_Int__FlatMapped._2 ),
    "collection.immutable.StreamView[Int,Stream[Int]]Mapped" -> laws.MethodFinder(inst_collection_immutable_StreamView_Int_Stream_Int__Mapped._1, inst_collection_immutable_StreamView_Int_Stream_Int__Mapped._2 ),
    "collection.immutable.StreamView[Int,Stream[Int]]Patched" -> laws.MethodFinder(inst_collection_immutable_StreamView_Int_Stream_Int__Patched._1, inst_collection_immutable_StreamView_Int_Stream_Int__Patched._2 ),
    "collection.immutable.StreamView[Int,Stream[Int]]Reversed" -> laws.MethodFinder(inst_collection_immutable_StreamView_Int_Stream_Int__Reversed._1, inst_collection_immutable_StreamView_Int_Stream_Int__Reversed._2 ),
    "collection.immutable.StreamView[Int,Stream[Int]]Sliced" -> laws.MethodFinder(inst_collection_immutable_StreamView_Int_Stream_Int__Sliced._1, inst_collection_immutable_StreamView_Int_Stream_Int__Sliced._2 ),
    "collection.immutable.StreamView[Int,Stream[Int]]TakenWhile" -> laws.MethodFinder(inst_collection_immutable_StreamView_Int_Stream_Int__TakenWhile._1, inst_collection_immutable_StreamView_Int_Stream_Int__TakenWhile._2 ),
    "null" -> Set()
  )
}
