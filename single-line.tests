// ********************************************************
// This file contains tests for collections in the form of a bunch of reasonably simple laws.
// Each test must fit on one line to encourage simplicity of the laws.

// Variables needed are lower case, listed on the left of "..."
//   x is the collection being tested.  It's assumed; if it's all you need, omit the "..."
//   a is an element of the same type as held by x
//   f is a function that maps from one value to another of the type held by x
//   m is a number of a size suitable for indexing into the collection.  May be negative.  Use n first if you only need one.
//   n is a number of a size suitable for indexing into the collection.  May be negative.
//   one is the value one (if it can be supplied by the type held by x)
//   op is a commutative two-argument function (e.g. +)
//   p is a predicate that on types held by x (returns true/false)
//   pf is a partial function on types held by x.  It is not guaranteed that it match p or f.
//   y is another collection of the type being tested.
//   z is an element of the same type as held by x (for now--was supposed to be generic zero for folds)
//   zero is the value zero (if it can be supplied by the type held by x)

// Flags describing the test are upper case, also listed on the left of "..."
//    A means "array-like" in that it isn't actually a subclass of TraversableOnce
//    N means "no free type parameters" (i.e. x cannot hold a different type)
//    S means "set-like" in that duplicates are not required to be stored
//    U means "unordered" so indexing, dropping, etc. will not necessarily agree with each other
// Flags can either be positive or negative
//    a positive flag is just the name of the flag; to run this test a collection must also have this flag
//    a negative flag is the name prefixed by !; to run this test a collection must not have this flag

// On the right of ... is the test (if there is no ..., the whole line is the test).

// Methods that are required must be wrapped in backwards ticks ``.
// You do not need to use backwards ticks more than once per method name.

// It is customary to write the more derived operation on the left side of an equality test.

// Four special relations are supplied to aid testing:
//   theSameAs checks whether the LHS and RHS supply the same elements in the same number
//     if the test is ordered, it additionally tests whether they're in the same order
//   isPartOf checks whether the LHS is a subset of the RHS
//   implies is true when the LHS is false, or when both LHS and RHS are true
//   impliedBy is the opposite of implies (i.e. a implies b is the same as b impliedBy a)

// A double slash indicates a comment.  These will be stripped off of the end of any source code.
// ********************************************************


f !S ... x.map(f) theSameAs { val y = collection.mutable.ArrayBuffer[@A](); x.foreach(y += _); y.map(f) }
f S ... x.map(f) theSameAs { val y = collection.mutable.HashSet[@A](); x.foreach(y += _); y.map(f) }
f !RANGE ... sameType(x, x.map(f))
y !S ... x.flatMap(xi => y.toList.take(xi)) theSameAs { val z = collection.mutable.ArrayBuffer[@A](); x.foreach(xi => z ++= y.toList.take(xi)); z }
y S ... x.flatMap(xi => y.toList.take(xi)) theSameAs { val z = collection.mutable.HashSet[@A](); x.foreach(xi => z ++= y.toList.take(xi)); z }
y ... sameType(x, x.flatMap(xi => y.toList.take(xi)))
p ... x.`exists`(p) == x.`find`(p).isDefined
p ... x.`forall`(p) implies (x.`isEmpty` || x.`exists`(p))
p ... var y = false; x.`foreach`(xi => y |= p(xi)); y == x.`exists`(p)
x.`toIterator` theSameAs x
x.`toStream` theSameAs x
x.`toTraversable` theSameAs x

sameType(x, x.`companion`.empty[@A])
!S ... x.`mkString` == { val sb = new StringBuilder; x.foreach(sb ++= _.toString); sb.result }
!S ... x.`mkString` == { val sb = new StringBuilder; x.`addString`(sb); sb.result }

z ... x.`aggregate`(z)((b,a) => b, (b1,b2) => b1) == z
z ... x.`aggregate`(z)((b,a) => b, (b1,b2) => b2) == z
n m r ... n < 0 || n >= x.`size` || m < 0 || { val arr = new Array[@A](r); x.`copyToArray`(arr, n, m); arr.take(math.min(m,r)) theSameAs x.toArray.drop(n).take(m) }
pf ... x.`collectFirst`(pf).isDefined == x.`exists`(pf.isDefinedAt)
val b = new collection.mutable.ArrayBuffer[@A]; x.`copyToBuffer`(b); b.result theSameAs x
p ... x.`count`(p) > 0 == x.`exists`(p)
p ... (x.`count`(p) == x.`size`) == x.`forall`(p)
p ... x.`count`(p) == { var y=0; x.`foreach`(xi => if (p(xi)) y += 1); y }
p ... x.filter(p).`size` == x.`count`(p) // Filter is part of MonadOps, so we won't test for it!
p ... x.filter(p).`forall`(p) == true
p !RANGE ... sameType(x, x.filter(p))
a op ... x.`foldLeft`(a)(op) == x.`foldRight`(a)(op)
a op ... x.`foldLeft`(a)(op) == x.`/:`(a)(op)
a op ... x.`foldRight`(a)(op) == x.`:\\`(a)(op)
x.`hasDefiniteSize` == @DEFINITE
Try{x.`max`}.toOption == Try{x.`reduce`(_ max _)}.toOption
f ... Try{x.`maxBy`(f)}.toOption == Try{ val fx = x.map(f).`max`; x.find(xi => f(xi)==fx).get }.toOption
Try{x.`min`}.toOption == Try{x.`reduce`(_ min _)}.toOption
f ... Try{x.`minBy`(f)}.toOption == Try{ val fx = x.map(f).`min`; x.find(xi => f(xi)==fx).get }.toOption
x.`nonEmpty` == x.`exists`(_ => true)
one ... x.`product` == x.`fold`(one)(_ * _)
op ... Set(Try{x.`reduce`(op)}.toOption, Try{x.`reduceLeft`(op)}.toOption, Try{x.`reduceRight`(op)}.toOption, x.`reduceOption`(op), x.`reduceLeftOption`(op), x.`reduceRightOption`(op)).size == 1
x.`size` == x.`count`(_ => true)
zero ... x.`sum` == x.`fold`(zero)(_ + _)
!A !N !VIEW ... x.`to`[@CCN] theSameAs x
x.`toArray` theSameAs x
x.`toBuffer` theSameAs x
x.`toIndexedSeq` theSameAs x
x.`toIterable` theSameAs x
x.`toList` theSameAs x
x.map(xi => (xi,xi)).`toMap` theSameAs { val hm = new collection.mutable.HashMap[@A,@A]; x.foreach(xi => hm += xi -> xi); hm }
x.`toSeq` theSameAs x
x.`toSet` theSameAs x
x.`toVector` theSameAs x
p !S ... val y = new collection.mutable.ArrayBuffer[@A]; x.`withFilter`(p).foreach(y += _); y theSameAs x.filter(p)
p S ... val y = new collection.mutable.HashSet[@A]; x.`withFilter`(p).foreach(y += _); y theSameAs x.filter(p)
x.`hasNext` == x.`nonEmpty`
x.`hasNext` implies Try{ x.`next` }.isSuccess
y !S ... x.`++`(y).`size` == x.size + y.size
y S ... x.`++`(y).`size` <= x.size + y.size
y S ... x.`++`(y).`size` == x.size + y.filter(yi => !x.`contains`(yi)).size
y !S ... (x.`++`(y)).`take`(x.`size`) theSameAs x
y !S ... (x.`++`(y)).`drop`(x.`size`) theSameAs y
y !RANGE ... sameType(x, x.`++`(y))
x.`buffered` theSameAs x
pf ... x.`collect`(pf) theSameAs x.`filter`(pf.isDefinedAt).`map`(pf)
pf !RANGE ... sameType(x, x.`collect`(pf))
n ... x.`contains`(n) == x.`exists`(_ == n)
x.`corresponds`(x)(_ == _)
y ... (x.`size` != y.size) implies !x.`corresponds`(y)(_ == _)
y ... x.`corresponds`(y)((_,_) => false) implies !x.`nonEmpty` && !y.`nonEmpty`
n ... x.`drop`(n).`size` == (0 max (x.size-(0 max n)))
n ... x.`drop`(n) isPartOf x
n ... sameType(x, x.`drop`(n))
p ... val y = x.`dropWhile`(p); !x.`hasNext` || p(x.`next`)
p ... x.`dropWhile`(p) isPartOf x
p ... sameType(x, x.`dropWhile`(p))
val (x1,x2) = x.`duplicate`; x1.corresponds(x2)(_ == _) && x1.corresponds(x)(_ == _)
p ... val (x1,x2) = x.`duplicate`; sameType(x1, x2)
p ... x.`filterNot`(p) theSameAs x.`filter`(xi => !p(xi))
p !RANGE ... sameType(x, x.`filterNot`(p))
n ... n <= 0 || x.`grouped`(n).map(_.size).`sum` == x.`size`
n m ... n <= 0 || m < 0 || { var y = 0; x.`grouped`(n).`drop`(m).take(1).map(_.`size`).foreach(y = _); (y < n) implies !x.grouped(n).drop(m+1).`nonEmpty` }
n ... x.`grouped`((1 max n)).flatMap(xi => xi) theSameAs x
x.`isEmpty` == !x.`nonEmpty`
x.`length` == x.`size`
a n ... x.`padTo`(n, a).`size` == (n max x.size)
a n ... x.`padTo`(n, a).`drop`(x.`size`).`forall`(_ == a)
a n ... (n <= x.`size`) implies (x.`padTo`(n, a) theSameAs x)
a n !RANGE ... sameType(x, x.`padTo`(n,a))
p ... val (t,f) = x.`partition`(p); (t theSameAs x.`filter`(p)) && (f theSameAs x.`filterNot`(p))
p !RANGE ... val (t,f) = x.`partition`(p); sameType(t,f) && sameType(x,t)

// patch is inconsistent across collections, making it hard to write laws.  These should probably be true?
// y n m ... x.`patch`(n, y, m).`take`(n) theSameAs x.take(n)
// y n m ... x.`patch`(n, y, m).`drop`(n).`take`(y.`size`) theSameAs y
// y n m ... x.`patch`(n, y, m).`drop`((0 max n)+y.`size`) theSameAs x.`drop`((0 max n)+(0 max m))

y ... (x `sameElements` y) == (x theSameAs y)
// scanLeft and scanRight go here
n m ... n < 0 || m >= x.size || { x.`slice`(n, m).`size` == (0 max ((0 max m)-n)) }
n m !S ... n < 0 || m >= x.size || { x.`slice`(n, m) theSameAs x.`drop`(n).`take`((0 max m)-n) }
n m ... n < 0 || m >= x.size || { sameType(x, x.`slice`(n, m)) }
p ... x.`span`(p)._1.`forall`(p)
p !S ... (x.span(p)._2.`size`) > 0 implies !x.`span`(p)._2.`take`(1).`exists`(p)
p S ... (x.span(p)._2.`size`) > 0 implies !x.`span`(p)._2.`forall`(p)
p ... val (x1, x2) = x.`span`(p); val n = x1.`span`(p)._1.`size`; (x1 theSameAs x.`take`(n)) && (x2 theSameAs x.`drop`(n))
p ... val (x1, x2) = x.`span`(p); sameType(x1, x2) && sameType(x, x1)
n ... x.`take`(n).`size` == ((0 max n) min x.size)
n ... x.`take`(n) isPartOf x
n ... sameType(x, x.`take`(n))
p ... x.`takeWhile`(p).`forall`(p)
p ... x.`takeWhile`(p) isPartOf x
p ... x.`takeWhile`(p).`size` + x.`dropWhile`(p).size == x.size
p ... sameType(x, x.`takeWhile`(p))
y ... x.`zip`(y).map(_._1) theSameAs x.take(x.size min y.size)
y ... x.`zip`(y).map(_._2) theSameAs y.take(x.size min y.size)
y !N ... sameType(x, x.`zip`(y).map(_._1))
y a b ... x.`zipAll`(y, a, b).map(_._1) theSameAs x.`padTo`(x.`size` max y.size, a)
y a b ... x.`zipAll`(y, a, b).map(_._2) theSameAs y.`padTo`(x.`size` max y.size, b)
y a b !N ... sameType(x, x.`zipAll`(y, a, b).map(_._1))
x.`zipWithIndex`.map(_._1) theSameAs x
x.`zipWithIndex`.map(_._2) theSameAs (0 until x.`size`)
!N ... sameType(x, x.`zipWithIndex`.map(_._1))
x.`productArity` == x.`size`
y ... x.`++`(y) theSameAs x.`:++`(y)
y ... x.`++`(y) theSameAs y.`++:`(x)
a ... x.`::`(a).`size` == x.size+1
a ... x.`::`(a).`head` == a
a ... sameType(x, x.`::`(a))
a ... x.`+:`(a).`size` == x.size+1
a ... x.`+:`(a).`head` == a
a !RANGE ... sameType(x, x.`+:`(a))
a ... x.`:+`(a).`size` == x.size+1
a ... x.`:+`(a).`last` == a
a !RANGE ... sameType(x, x.`:+`(a))
a ... val s = x.`+`(a).`size` - x.size; 0 <= s && s <= 1
a ... x.`+`(a).`contains`(a)
a !RANGE ... sameType(x, x.`+`(a))
y ... x.`:::`(y) theSameAs y.`++`(x)
y ... sameType(x, x.`:::`(y))
n !ARRAY ... (n < 0) || (n >= x.`size`) || ((x: Any) match { case _: scala.collection.Seq[_] => Seq(x.`apply`(n)) theSameAs x.`drop`(n).`take`(1); case _ => true })
n ARRAY ... (n < 0) || (n >= x.`size`) || { Seq(x.`apply`(n)) theSameAs x.`drop`(n).`take`(1) }
// combinations goes here
y ... x.`containsSlice`(y) == Iterator.from(0).map(x.`drop`).takeWhile(_.`nonEmpty`).exists(_.`take`(y.`size`) theSameAs y)
y ... val List(xg,yg,xdyg) = List(x,y,x.`diff`(y)).map(_.`groupBy`(identity).mapValues(_.size).toMap); xg.forall{ case (k,n) => val m = n - yg.getOrElse(k,0); (m > 0) implies (xdyg.getOrElse(k,0) == m) }
val s = x.`toSet`; x.`distinct`.`size` == s.size && x.forall(s)
n !S ... x.`dropRight`(n) theSameAs x.`reverse`.`drop`(n).reverse
sameType(x, x.`reverse`)
y ... x.`endsWith`(y) == (x.`drop`(math.max(0, x.`size`-y.size)) theSameAs y)
g ... x.`groupBy`(g).keySet theSameAs x.map(g).toSet
g ... x.`groupBy`(g).toMap.forall{ case (k,vs) => x.filter(xi => g(xi)==k) theSameAs vs }
!ARRAY ... !x.`nonEmpty` || (x match { case _: scala.collection.Seq[_] => Seq(x.`head`) theSameAs x.`take`(1); case _ => true })
ARRAY ... !x.`nonEmpty` || (Seq(x.`head`) theSameAs x.`take`(1))
x.`headOption` == Try{ x.`head` }.toOption
n a ... n < 0 || { val k = x.`drop`(n).`takeWhile`(_ != a); x.`indexOf`(a,n) match { case -1 => k.`size` == (0 max x.size-n); case kk => n+k.size == kk && x.`drop`(kk).`head` == a } }
a ... x.`indexOf`(a) == x.`indexOf`(a,0)
y ... (x.`indexOfSlice`(y) >= 0) == x.`containsSlice`(y)
y ... val i = x.`indexOfSlice`(y); (i < 0) || (x.`drop`(i).`take`(y.`size`) theSameAs y)
p n !ITERATOR ... n < 0 || { val k = x.`drop`(n).`takeWhile`(xi => !p(xi)); x.`indexWhere`(p,n) match { case -1 => k.`size` == (0 max x.size-n); case kk => n+k.size == kk && p(x.`drop`(kk).`head`) } }
p !ITERATOR ... x.`indexWhere`(p) == x.`indexWhere`(p,0)
p ITERATOR ... val k = x.`takeWhile`(xi => !p(xi)).`size`; x.`indexWhere`(p) match { case -1 => k == x.`size`; case q => q == k }
x.`indices` == (0 until x.`size`)
x.`size` == 0 || x.`init` == x.`dropRight`(1)
x.`inits`.toVector.map(_.toVector) == { val vx = x.`toVector`; (for (i <- vx.indices) yield vx.drop(i)).toVector }
y ... x.`intersect`(y).`toSet` == (x.toSet & y.toSet)  // Need to improve this one
y !RANGE ... sameType(x, x.`intersect`(y))
x.`iterator` theSameAs x
x.`size` == 0 || { Seq(x.`last`) theSameAs x.`takeRight`(1) }
a n ... n < 0 || { x.`lastIndexOf`(a,n) match { case -1 => x.`take`(n+1).`indexOf`(a) == -1; case k => k == (n min x.`size`-1) - x.take(n+1).reverse.indexOf(a) } }
a ... x.`lastIndexOf`(a) == x.lastIndexOf(a,x.`size`-1)
p n ... n < 0 || { x.`lastIndexWhere`(p,n) match { case -1 => x.`take`(n+1).`indexWhere`(p) == -1; case k => k == (n min x.`size`-1) - x.take(n+1).reverse.indexWhere(p) } }
p ... x.`lastIndexWhere`(p) == x.lastIndexWhere(p,x.`size`-1)
x.`lastOption` == Try{ x.`last` }.toOption
n ... x.`lengthCompare`(n).signum == (x.`size` compare n).signum
!ITERATOR ... val xx = x.map(_.toString); xx eq xx.`mapConserve`(identity)
x.`size` > 8 || x.`permutations`.size == x.toVector.groupBy(identity).map{ case (_,vs) => vs.size }.scanLeft((x.size,0)){ (c,i) => (c._1 - c._2, i) }.map{ case (n,k) => (1L to k).map(n+1 - _).product / (1L to k).product }.product
x.`size` > 8 || x.`permutations`.size == x.`permutations`.toSet.size
x.`size` > 8 || { val xs = x.toSet; x.`permutations`.forall(_.forall(xs)) }
p ... x.`prefixLength`(p) == x.`takeWhile`(p).`size`
x.`productIterator` theSameAs x
val ix = x.`toIndexedSeq`; val k = x.`size`; var ki = 0; x.`reverse`.`forall`{ xi => ki += 1; xi == ix(k - ki) }
x.`reverseIterator` theSameAs x.`reverse`
f ... x.`reverseMap`(f) theSameAs x.`reverse`.map(f)
f ... x.`reverseMap`(f) theSameAs x.map(f).`reverse`
f !RANGE ... sameType(x, x.`reverseMap`(f))
y ... x.`reverse_:::`(y) theSameAs x.`:::`(y.`reverse`)
y ... sameType(x, x.`reverse_:::`(y))
p n ... n <= 0 || x.`segmentLength`(p,n) == x.`drop`(n).`takeWhile`(p).`size`
r ... r <= 0 || x.`sliding`(r).`size` == (if (x.nonEmpty) math.max(0,x.`size`-r)+1 else 0)
r ... r <= 0 || x.`size` <= 0 || { val vx = x.toVector; x.`sliding`(r).toVector.map(_.toVector) == (for (i <- 0 to (1+vx.size-r)) yield vx.slice(i,math.min(vx.size,i+r))).toVector }
f ... x.`sortBy`(f) theSameAs x.`sortWith`((a,b) => f(a) < f(b))
f ... val xx = x.`sortWith`((a,b) => f(a) > f(b)).toList; (xx zip xx.drop(1)).forall{ case (a,b) => !(f(a) > f(b)) }
x.`sorted` theSameAs x.`toArray`.sorted // Need to add a custom ordering here
n ... val (x1,x2) = x.`splitAt`(n); (x1 theSameAs x.`take`(n)) && (x2 theSameAs x.`drop`(n))
n ... val (x1,x2) = x.`splitAt`(n); sameType(x1, x2) && sameType(x, x1)
n y ... n < 0 || { x.`startsWith`(y,n) == (x.`drop`(n).`take`(y.`size`) theSameAs y) }
y ... x.`startsWith`(y) == x.startsWith(y,0)
x.`size` < 1 || { x.`tail` theSameAs x.`drop`(1) }
x.`tails` theSameAs x.`reverse`.`inits`.map(_.reverse)
n ... x.`takeRight`(n) theSameAs x.`reverse`.`take`(n).reverse
n !RANGE ... sameType(x, x.`takeRight`(n))
// transpose goes here
y ... x.`union`(y).`toSet` == (x.toSet union y.toSet)
y !RANGE ... sameType(x, x.`union`(y))
y ... val xa = x.`zip`(y).`unzip`._1.`toArray`; x.`take`(xa.size) theSameAs xa
y ... val xb = x.`zip`(y).`unzip`._2.`toArray`; y.`take`(xb.size) theSameAs xb
x theSameAs x.`view`
y ... val x0 = x; x0.`++=`(y); x0 theSameAs (x.`++`(y))
y ... val x0 = x; x0.`++=:`(y); x0 theSameAs (y.`++`(x))
a ... val x0 = x; x0.`+=`(a); x0 theSameAs (x.`:+`(a))
a ... val x0 = x; x0.`+=`(a); x0 theSameAs (x.`+`(a))
a ... val x0 = x; x0.`+=:`(a); x0 theSameAs (x.`+:`(a))
a ... (x.`-`(a)).`count`(_ == a) == (0 max x.count(_ == a) - 1)
a ... (x.`-`(a)).`size` == x.size - (if (x.`contains`(a)) 1 else 0)
a ... (x.`-`(a)) isPartOf x
a !RANGE ... sameType(x, x.`-`(a))
a ... val x0 = x; x0.`-=`(a) theSameAs x.`-`(a)
y ... val x0 = x; x0.`--=`(y); val x1 = x; y.foreach(yi => x.`-=`(yi)); x0 theSameAs x1
a ... { val z = x; z.`append`(a); z } == x.`+=`(a)
y ... { val z = x; z.`appendAll`(y); z } == x.`++=`(y)
a ... { val z = x; z.`prepend`(a); z } == x.`+=:`(a)
y ... { val z = x; z.`prependAll`(y); z } == x.`++=:`(y)
n ... n < 0 || n >= x.`size` || { val x0 = x; x0.`reduceToSize`(n); x0.`size` == n }
n !S ... n < 0 || n >= x.`size` || { val x0 = x; x0.`reduceToSize`(n); x0 theSameAs x.`take`(n) }
n m !S !DOUBLL ... n < 0 || n >= x.`size` || { val x0 = x; x0.`remove`(n,m); x0 theSameAs (x.`take`(n).`++`(x.`drop`(n+(0 max m)))) }
n !S !DOUBLL ... n < 0 || n >= x.`size` || { val x0 = x; val a0 = x0.`remove`(n); x0.`size` == x.`size`-1 && x.`apply`(n) == a0 }
n !S !DOUBLL ... n < 0 || n >= x.`size` || { val x0, x1 = x; x0.`remove`(n); x1.`remove`(n,1); x0 theSameAs x1 }
x.`result` theSameAs x
f ... val x0 = x; x0.`transform`(f); x0 theSameAs x.map(f)
n ... n < 0 || n >= x.`size` || { val x0 = x; x0.`trimEnd`(n); x0 theSameAs x.`dropRight`(n) }
n ... n < 0 || n >= x.`size` || { val x0 = x; x0.`trimStart`(n); x0 theSameAs x.`drop`(n) }
n a ... n < 0 || n >= x.`size` || { x.`updated`(n,a) theSameAs (x.`take`(n).`:+`(a).`++`(x.`drop`(n+1))) }
n a ... n < 0 || n >= x.`size` || sameType(x, x.`updated`(n,a))
n a ... n < 0 || n >= x.`size` || { val x0 = x; x0.`update`(n, a); x0 theSameAs x.`updated`(n,a) }
y ... x.`&`(y) isPartOf x
y ... x.`forall`(xi => y.`contains`(xi) == x.`&`(y).contains(xi))
y !RANGE ... sameType(x, x.`&`(y))
y ... x.`&~`(y) isPartOf x
y ... x.`forall`(xi => y.`contains`(xi) != x.`&~`(y).contains(xi))
y !RANGE ... sameType(x, x.`&~`(y))

a S ... x.`add`(a) == !x.`contains`(a)
a S ... (if (x.`contains`(a)) 0 else 1) == { val x0 = x; x0.`add`(a); x0.`size` - x.`size` }
a S ... val x0 = x; x0.`add`(a); x0.`contains`(a)
a S ... val x0 = x; x0.`remove`(a); x0 isPartOf x
a S ... val x0 = x; x0.`remove`(a); val k = x.`size` - x0.size; 0 <= k && k <= 1
a S ... val x0 = x; x0.`remove`(a); !x0.`contains`(a)
p S ... val x0 = x; x0.`retain`(p); x0 theSameAs x.filter(p)
a S ... val x0 = x; x0.`update`(a,true); x0 theSameAs x0.`+`(a)
a S ... val x0 = x; x0.`update`(a,false); x0 theSameAs x0.`-`(a)
y ... x.`|`(y) theSameAs x.`union`(y)

x.`array` theSameAs x
x.`clone` theSameAs x
{ val x0 = x; x0.`clear`; x0 theSameAs Nil }
{ val x0 = x; x0.`clear`; x0.`++=`(x); x0 theSameAs x }
x.`empty` theSameAs Nil
x.`toQueue` theSameAs x
y ... x.`subsetOf`(y) == x.`forall`(y contains _)
