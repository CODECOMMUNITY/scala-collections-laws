p ... x.`exists`(p) == x.`find`(p).isDefined
p ... x.`forall`(p) implies (x.`isEmpty` || x.`exists`(p))
p ... var y = false; x.`foreach`(xi => y |= p(xi)); y == x.`exists`(p)
x.`toIterator` theSameAs x
x.`toStream` theSameAs x
x.`toTraversable` theSameAs x
z ... x.`aggregate`(z)((b,a) => b, (b1,b2) => b1) == z
z ... x.`aggregate`(z)((b,a) => b, (b1,b2) => b2) == z
// copyToArray goes here...need some conditions
pf ... x.`collectFirst`(pf).isDefined == x.`exists`(pf.isDefinedAt)
val b = new collection.immutable.ArrayBuffer[@A]; x.`copyToBuffer`(b); b.result theSameAs x
p ... x.`count`(p) > 0 == x.`exists`(p)
p ... (x.`count`(p) == x.`size`) == x.`forall`(p)
p ... x.`count`(p) == { var y=0; x.`foreach`(xi => if (p(xi)) y += 1); y }
p ... x.filter(p).`size` == x.`count`(p) // Filter is part of MonadOps, so we won't test for it!
p ... x.filter(p).`forall`(p) == true
// flatMap goes here, need monad laws
a op ... Set(x.`fold`(a)(op), x.`foldLeft`(a)(op), x.`foldRight`(a)(op), x.`/:`(a)(op), x.`:\`(a)(op)).size == 1""
// map goes here, need monad laws
Try{x.`max`}.toOption == Try{x.`reduce`(_ max _)}.toOption
// maxBy(f)
Try{x.`min`}.toOption == Try{x.`reduce`(_ min _)}.toOption
// minBy(f)
x.`nonEmpty` == x.`exists`(_ => true)
one ... x.`product` == x.`fold`(one)(_ * _)
op ... Set(Try{x.`reduce`(op)}.toOption, Try{x.`reduceLeft`(op)}.toOption, Try{x.`reduceRight`(op)}.toOption, x.`reduceLeftOption`(op), x.`reduceRightOption`(op)).size == 1
x.`size` == x.`count`(_ => true)
zero ... x.`sum` == x.`fold`(zero)(_ + _)
x.`to`[@CC] theSameAs x
x.`toArray` theSameAx x
x.`toBuffer` theSameAs x
x.`toIndexedSeq` theSameAs x
x.`toIterable` theSameAs x
x.`toList` theSameAs x
x.`toMap` theSameAs x
x.`toSeq` theSameAs x
x.`toSet` theSameAs x
x.`toVector` theSameAs x
p ... x.`withFilter`(p) theSameAs x.filter(p)
x.`hasNext` == x.`nonEmpty`
x.`hasNext` implies Try{ x.`next` }.isSuccess
y ... x.`++`(y).`size` == x.size + y.size
y ... x.`++`(y).`take`(x.`size`) theSameAs x
y ... x.`++`(y).`drop`(x.`size`) theSameAs y
x.`buffered` theSameAs x
pf ... x.`collect`(pf) theSameAs x.`filter`(pf.isDefinedAt).`map`(pf)
n ... x.`contains`(n) == x.`exists`(_ == n)
x.`corresponds`(x)(_ == _)
y ... (x.`size` != y.size) implies !x.`corresponds`(y)(_ == _)
y ... x.`corresponds`(y)((_,_) => false) implies !x.`nonEmpty` && !y.`nonEmpty`
n ... x.`drop`(n).`size` == (0 max (x.size-(0 max n)))
n ... x.`drop`(n) isPartOf x
p ... val y = x.`dropWhile`(p); !x.`hasNext` || p(x.`next`)
p ... x.`dropWhile`(p) isPartOf x
val (x1,x2) = x.`duplicate`; x1.corresponds(x2)(_ == _) && x1.corresponds(x)(_ == _)
p ... x.`filterNot`(p) theSameAs x.`filter`(xi => !p(xi))
n ... x.`grouped`((1 max n)).map(_.size).`sum` == x.`size`
n m ... var y = 0; (x.`grouped`((1 max n)).`drop`(m).take(1).foreach(y = _.`size`); (y < (1 max n)) implies !x.grouped((1 max n)).drop(m+1).`nonEmpty`
n ... x.`grouped`((1 max n)).flatMap(identity) theSameAs x
x.`isEmpty` == !x.`nonEmpty`
x.`length` == x.`size`
a n ... x.`padTo`(a, n).`size` == (n max x.size)
a n ... x.`padTo`(a, n).`drop`(x.`size`).`forall`(_ == a)
a n ... (n <= x.`size`) implies (x.`padTo`(a, n) theSameAs x)
p ... val (t,f) = x.`partition`(p); (t theSameAs x.`filter`(p)) && (f theSameAs x.`filterNot`(p))
y n m ... x.`patch`(n, y, m).`take`(n) theSameAs x.take(n)
y n m ... x.`patch`(n, y, m).`drop`(n).`take`(y.`size`) theSameAs y
y n m ... x.`patch`(n, y, m).`drop`((0 max n)+y.`size`) theSameAs x.`drop`((0 max n)+(0 max m))
y ... (x `sameElements` y) == (x theSameAs y)
// scanLeft and scanRight go here
n m ... x.`slice`(n, m).`size` == (0 max ((0 max m)-(0 max n)))
n m ... x.`slice`(n, m) theSameAs x.`drop`(n).`take`((0 max m)-(0 max n))
p ... x.`span`(p)._1.`forall`(p)
p ... !x.`span`(p)._2.`take`(1).`exists`(p)
p ... val (x1, x2) = x.`span`(p); val n = x1.`span`(p)._1.`size`; (x1 theSameAs x.`take`(n)) && (x2 theSameAs x.`drop`(n))
n ... x.`take`(n).`size` == ((0 max n) min x.size)
n ... x.`take`(n) isPartOf x
p ... x.`takeWhile`(p).`forall`(p)
p ... x.`takeWhile`(p) isPartOf x
p ... x.`takeWhile`(p).`size` + x.`dropWhile`(p).size == x.size
y ... x.`zip`(y).map(_._1) theSameAs x.take(x.size min y.size)
y ... x.`zip`(y).map(_._2) theSameAs y.take(x.size min y.size)
y a b ... x.`zipAll`(y, a, b).map(_._1) theSameAs x.`padTo`(a, x.size max y.size)
y a b ... x.`zipAll`(y, a, b).map(_._2) theSameAs y.`padTo`(b, x.size max y.size)
x.`zipWithIndex`.map(_._1) theSameAs x
x.`zipWithIndex`.map(_._2).`sameElements`(0 until x.`size`)
x.`productArity` == x.`size`
y ... x.`++`(y) theSameAs x.`:++`(y)
y ... x.`++`(y) theSameAs y.`++:`(x)
a ... x.`::`(a).`size` == x.size+1
a ... x.`+:`(a).`size` == x.size+1
a ... x.`:+`(a).`size` == x.size+1
a ... val s = x.`+`(a).`size` - x.size; 0 <= s && s <= 1
a ... x.`::`(a).`head` == a
a ... x.`+:`(a).`head` == a
a ... x.`:+`(a).`last` == a
a ... x.`+`(a).`contains`(a)
y ... x.`:::`(y) theSameAs y.`++`(x)
n ... val k = n min x.`size`-1; (k < 0) || x.`apply`(k) == x.`productElement`(k)
n ... val k = n min x.`size`-1; (k < 0) || (x match { case _: scala.collection.Seq[_] => Seq(x.`apply`(k)) theSameAs x.`drop`(n).`tail`(1); case _ => true })
// combinations goes here
// containsSlice goes here
y ... val List(g,h) = List(x,y).`groupBy`(identity).mapValues(_._2.length).toMap; x.`diff`(y).`groupBy`(identity).mapValues(_._2.length).forall{ case (k,v) => v == (0 max g(k)-h.get(k).getOrElse(0)) }
val s = x.`toSet`; x.`distinct`.`size` == s.size && x.forall(s)
n ... x.`dropRight`(n) theSameAs x.`reverse`.`drop`(n).reverse
// endsWith goes here
// groupBy goes here
!x.`nonEmpty` || (x match { case _: scala.collection.Seq[_] => Seq(x.`head`) theSameAs x.`take`(1); case _ => true })
x.`headOption` == Try{ x.`head` }.toOption
n a ... n < 0 || { val k = x.`drop`(n).`takeWhile`(_ != a); x.`indexOf`(a,n) match { case -1 => n+k.size == x.size; case kk => n+k.size == kk && x.`drop`(kk).`head` == a } }
a ... x.`indexOf`(a) == x.`indexOf`(a,0)
// indexOfSlice goes here
p n ... n < 0 || { val k = x.`drop`(n).`takeWhile`(xi => !p(xi)); x.`indexWhere`(p,n) match { case -1 => n+k.size == x.size; case kk => n+k.size == kk && p(x.`drop`(kk).`head`) } }
p ... x.`indexWhere`(p) == x.`indexWhere`(p,0)
x.`indices` == (0 until x.`size`)
x.`init` == x.`dropRight`(1)
x.`inits` theSameAs Iterator.iterate(x.`toSeq`.iterator)(_.dropRight(1)).takeWhile(_.nonEmpty) :+ x.toSeq.dropRight(x.`size`)
y ... x.`intersect`(y).`toSet` == (x.toSet & y.toSet)  // Need to improve this one
x.`iterator` theSameAs x
Seq(x.`last`) theSameAs x.`takeRight`(1)"
a n ... n < 0 || { x.`lastIndexOf`(a,n) match { case -1 => x.`take`(n+1).`indexOf`(a) == -1; case k => k == n+1 - x.take(n+1).reverse.indexOf(a) } }
a ... x.`lastIndexOf`(a) == x.lastIndexOf(a,x.`size`-1)
p n ... n < 0 || { x.`lastIndexWhere`(p,n) match { case -1 => x.`take`(n+1).`indexOf`(a) == -1; case k => k == n+1 - x.take(n+1).reverse.indexWhere(p) } }
p ... x.`lastIndexWhere`(p) == x.lastIndexWhere(p,n)
x.`lastOption` == Try{ x.`last` }.toOption
n ... x.`lengthCompare`(n) == (x.`size` compare n)
// mapConserve goes here
// permutations goes here
p ... x.`prefixLength`(p) == x.`takeWhile`(p).`size`
x.`productIterator` theSameAs x
val ix = x.`toIndexedSeq`; val k = x.`size`; var ki = 0; x.`forall`{ xi => ki += 1; xi == ix(k - ki) }
x.`reverseIterator` theSameAs x.`reverse`
f ... x.`reverseMap`(f) theSameAs x.`reverse`.map(f)
f ... x.`reverseMap`(f) theSameAs x.map(f).`reverse`
y ... x.`reverse_:::`(y) theSameAs x.`:::`(y.`reverse`)
// segmentLength goes here
// sliding goes here
// sortBy goes here
// sortWith goes here
x.`sorted` theSameAs x.`toArray`.sorted // Need to add a custom ordering here
n ... val (x1,x2) = x.`splitAt`(n); (x1 theSameAs x.`take`(n)) && (x2 theSameAs x.`drop`(n))
n y ... n < 0 || { x.`startsWith`(y,n) == (x.`drop`(n).`take`(y.`size`) theSameAs y) }
y ... x.`startsWith`(y) == x.startsWith(y,0)
x.`size` < 1 || { x.`tail` theSameAs x.`drop`(1) }
x.`tails` theSameAs x.`reverse`.`inits`.map(_.reverse)
n ... x.`takeRight`(n) == x.`reverse`.`take`(n).reverse
// transpose goes here
y ... x.`union`(y).`toSet` == (x.toSet union y.toSet)
// unzip goes here
// view would go here, but should be its own set of creators
y ... val x0 = x; x0.`++=`(y); x0 theSameAs (x.`++`(y))
y ... val x0 = x; x0.`++=:`(y); x0 theSameAs (y.`++`(x))
a ... val x0 = x; x0.`+=`(a); x0 theSameAs (x.`+`(a))
a ... val x0 = x; x0.`+=:`(a); x0 theSameAs (x.`+:`(a))
a ... (x.`-`(a)).`count`(_ == a) == (0 max x.count(_ == a) - 1)
a ... (x.`-`(a)).`size` == x.size - (if (x.`contains`(a)) 1 else 0)
a ... (x.`-`(a)) isPartOf x
a ... val x0 = x; x0.`-=`(a) theSameAs x.`-`(a)
y ... val x0 = x; x0.`--=`(y); val x1 = x; y.foreach(yi => x.`-=`(a)); x0 theSameAs x1
a ... x.`append`(a) == x.`+=`(a)
y ... x.`appendAll`(y) == x.`++=`(y)
a ... x.`prepend`(a) == x.`+=:`(a)
y ... x.`prependAll`(y) == x.`++=:`(y)
n ... n < 0 || { val x0 = x; x0.`reduceToSize`(n); x0.`size` == n }
n ... n < 0 || { val x0 = x; x0.`reduceToSize`(n); x0 theSameAs x.take(n) }
n m !S ... n < 0 || n >= x.`size` || { val x0 = x; x0.`remove`(n,m); x0 theSameAs (x.`take`(n).`++`(x.`drop`(n+(0 max m)))) }
n !S ... n < 0 || n >= x.`size` || { val x0 = x; val a0 = x0.`remove`(n); x0.`size` == x.`size`-1 && x.`apply`(n) == a0 }
n !S ... n < 0 || n >= x.`size` || { val x0, x1 = x; x0.`remove`(n); x1.`remove`(1); x0 theSameAs x1 }
x.`result` theSameAs x
f ... val x0 = x; x0.`transform`(f); x0 theSameAs x.map(f)
n ... n < 0 || n >= x.`size` || { val x0 = x; x0.`trimEnd`(n); x0 theSameAs x.`dropRight`(n) }
n ... n < 0 || n >= x.`size` || { val x0 = x; x0.`trimStart`(n); x0 theSameAs x.`drop`(n) }
n a ... n < 0 || n >= x.`size` || { x.`updated`(n,a) theSameAs (x.`take`(n).`:+`(a).`++`(x.`drop`(n+1))) }
n a ... n < 0 || n >= x.`size` || { val x0 = x; x0.update(n, a); x0 theSameAs x.`updated`(n,a) }
y ... x.`&`(y) isPartOf x
y ... x.`forall`(xi => y.`contains`(xi) == x.`&`(y).contains(xi))
y ... x.`&~`(y) isPartOf x
y ... x.`forall`(xi => y.`contains`(yi) != x.`&~`(y).contains(xi))
a ... x isPartOf x.`add`(a)
a ... val k = x.`add`(a).`size` - x.`size`; 0 <= k && k <= 1
a ... x.`add`(a).`contains`(a)
a S ... val x0 = x; x0.`remove`(a); x0 isPartOf x
a S ... val x0 = x; x0.`remove`(a); val k = x.`size` - x0.size; 0 <= k <= 1
a S ... val x0 = x; x0.`remove`(a); !x.`contains`(a)
p S ... val x0 = x; x0.`retain`(p); x0 theSameAs x.filter(p)
a S ... val x0 = x; x0.`update`(a,true); x0 theSameAs x0.`+`(a)
a S ... val x0 = x; x0.`update`(a,false); x0 theSameAs x0.`-`(a)
y ... x.`|`(y) theSameAs x.`union`(y)
